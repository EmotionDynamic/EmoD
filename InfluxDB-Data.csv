time,emotionIntensity.anger,emotionIntensity.comments,emotionIntensity.fear,emotionIntensity.joy,emotionIntensity.sad,emotionIntensity.user,emotionIntensity.user association
2018-01-03T00:00:00.000Z,0,"so what do you think? is it worth taking a look into the ipython kernel? or is it the jedi problem? i was thinking about solving it.  hi guys, is this issue still valid?",0.266,0,0,dmanikowski-reef,Other
2018-01-04T00:00:00.000Z,0,"hi, i believe i have found part of the culprit and a way to significantly, but not completely, reduce this problem!after scrolling through the `ipykernel/pylab/backend_inline.py` code, i got the hunch that interactive mode does a lot of storing of ""plot-things"", though i don't understand it completely, so i am not able to pinpoint the exact reason with certainty.here is the code to verify this (based on @tacaswell's snippet above), useful for anyone trying to implement a fix.initialization:```pythonimport matplotlibimport matplotlib.pyplot as pltimport matplotlib.ticker%matplotlib inlinematplotlib.rcparams['figure.figsize'] = (24, 6)matplotlib.rcparams['figure.dpi'] = 150from resource import getrusagefrom resource import rusage_selfdef friendlyplot():    fig, ax = plt.subplots()    ax.plot(range(1000))    fig.savefig('tmp.png')    plt.close('all')```actual test:```pythonprint(""before any:  {:7d} kb"".format(getrusage(rusage_self).ru_maxrss))friendlyplot()print(""before loop: {:7d} kb"".format(getrusage(rusage_self).ru_maxrss))for i in range(50):    friendlyplot()print(""after loop:  {:7d} kb"".format(getrusage(rusage_self).ru_maxrss))import gc ; gc.collect(2)print(""after gc:    {:7d} kb"".format(getrusage(rusage_self).ru_maxrss))```running it for 50 iterations of the loop, i get:```before any:    87708 kbbefore loop:  106772 kbafter loop:   786668 kbafter gc:     786668 kb```running it for 200 iterations of the loop, i get:```before any:    87708 kbbefore loop:  100492 kbafter loop:  2824316 kbafter gc:    2824540 kb```which shows the almost linear increase in memory with iterations.now to the fix/workaround: call `matplotlib.interactive(false)` before the test-snippet, and then run it.with 50 iterations:```before any:    87048 kbbefore loop:  104992 kbafter loop:   241604 kbafter gc:     241604 kb```and with 200 iterations:```before any:    87536 kbbefore loop:  103104 kbafter loop:   239276 kbafter gc:     239276 kb```which confirms that only a constant increase (independent of iterations) is left.using these numbers, i make a rough estimate of the leak size per iteration:```(786668-(241604 - 104992))/50   = 13001.12(2824316-(241604 - 104992))/200 = 13438.52```and for a single iteration of the loop, i get `13560`. so the amount of leak *per iteration* is significantly smaller than the image size, be it raw (>3mb) or png-compressed (54kb).also, strangely, running a small-scale test (only few iterations) repeatedly in the same cell without restarting the kernel is much less consistent, i have not been able to understand this or determine a pattern.i hope someone with more knowledge of the internals can take it from here, as i lack the time and knowledge to dive deeper into it right now.",0,0,0,lucasb-eyer,Other
2018-01-05T00:00:00.000Z,0,i would like to try to do this. any hints where to look in the first place?,0,0,0,dmanikowski-reef,Other
2018-01-08T00:00:00.000Z,0,"has this been taken care of? if not, i'm interested in working through it!",0,0,0,lesley2958,Other
2018-01-09T00:00:00.000Z,0,"i'm supportive of the idea of having prettyprinter alternatives, but i would rather keep it on the level of having an extension point that's available for alternatives to what ipython provides by default, and being very conservative about changing that default because of how many people out there rely on ipython. but i'm just one person - and i realize there's a tension between keeping existing (grumpy-like-me) users happy by not changing things they are used to, and giving other users new reasons to make their experiences happier.  hi there,thanks for your question. you say that the answers given there are ""far from equiavalent to `sessioninfo()`"" without giving us a sense of why they are deficient. what is it that you find useful from sessioninfo that's missing? for example, [as far as i can tell from this site](https://www.rdocumentation.org/packages/utils/versions/3.4.3/topics/sessioninfo), r's sessioninfo  lists information about the blas or lapack implementation used - but that's not something ipython depends on or provides. numpy does use blas and lapack if they are available, so you could find out that information via `import numpy as np; np.show_config()`.the top answer on the thread you linked is from one of our own core developers @carreau. i'll rephrase his answer here. from the ipython side, we have the sys_info convenience function that has the following information:```in [1]: import ipythonin [2]: print(ipython.sys_info()){'commit_hash': 'ca5443062', 'commit_source': 'installation', 'default_encoding': 'utf-8', 'ipython_path': '/users/pivanov5/.virtualenvs/ipy6/lib/python3.6/site-packages/ipython', 'ipython_version': '6.2.1', 'os_name': 'posix', 'platform': 'darwin-15.6.0-x86_64-i386-64bit', 'sys_executable': '/users/pivanov5/.virtualenvs/ipy6/bin/python3.6', 'sys_platform': 'darwin', 'sys_version': '3.6.1 (default, mar 23 2017, 16:49:01) \n'                '[gcc 4.2.1 compatible apple llvm 8.0.0 (clang-800.0.42.1)]'}```calling out to `pip freeze` is a reasonable way to get the version of packages for python, though there's some other command one might use if you're using `conda` as your package manager.  many packages have a `.__version__` variable attached, but that's not universal - some opt for just `.version` and some make nothing available in the namespace at all.additionally, if you want to know the variables that have been imported directly, the `%who` `%who_ls` and `%whos` magic might be of interest to you.the python world isn't quite like r - there a lot more diffusion of responsibility among different packages and libraries. there's python the language, which comes with a rich standard library. on top of that, and using a few other 3rd party libraries, ipython provides a richer repl experience and some completion niceties, with shell integration and input/output history. to do data analysis, someone might reach for numpy, and then grab matplotlib for plotting. someone else might take pandas and use bqplot, instead. and a huge number of ipython users never use any of those, and simply use ipython as a richer interactive shell for their django development, as another example. so while we may not implement an equivalent of `sessioninfo` - it doesn't mean that you can't (perhaps using the `who_ls` magic as a starting point).let us know, so we can point you in the right direction or tell you what other options you might reach for.happy hacking! :bowtie:  since we have you here and you're interested in reproduciblity, you might enjoy reading about [the binder project](https://elifesciences.org/labs/8653a61d/introducing-binder-2-0-share-your-interactive-research-environment) , and the companion which [focuses more on the technical challenges](https://blog.jupyter.org/binder-2-0-a-tech-guide-2017-fd40515a3a84).",0,0.5,0,ivanov,Member
2018-01-10T00:00:00.000Z,0,"```ipython                   6.2.1                    py35_0    conda-forgematplotlib                2.1.1                    py35_0    conda-forgepython                    3.5.4                         0    conda-forge``````{'commit_hash': 'ca5443062', 'commit_source': 'installation', 'default_encoding': 'utf-8', 'ipython_path': '/home/christopher/mc/envs/dp_dev/lib/python3.5/site-packages/ipython', 'ipython_version': '6.2.1', 'os_name': 'posix', 'platform': 'linux-4.4.0-108-generic-x86_64-with-debian-stretch-sid', 'sys_executable': '/home/christopher/mc/envs/dp_dev/bin/python', 'sys_platform': 'linux', 'sys_version': '3.5.4 | packaged by conda-forge | (default, aug 10 2017, '                '01:38:41) \n'                '[gcc 4.8.2 20140120 (red hat 4.8.2-15)]'}```",0,0,0,CJ-Wright,Other
2018-01-11T00:00:00.000Z,0,"fwiw, i'm getting this error too. no idea why yet.",0,0,0,alok,Other
2018-01-12T00:00:00.000Z,0,5.5.0 worked for me too,0,0,0,auuron,Other
2018-01-13T00:00:00.000Z,0,"i would start by looking at related project has you are not the only one who are interested in it ; for example : - https://multithreaded.stitchfix.com/blog/2017/07/26/nodebook/i know there are more around. it is a complex enough problem that a team of interested people are more change to do something that work.i've recently learn about http://gittup.org/tup/, which seem to be able to intercept io operation (which is one of the reason why dependency tracking is hard). as you guessed, this is likely both a backend and frontend extension, though if you ""tag"" manually, it should be doable only as frontend-only extension. you'll have to play with the `cell.prototype.execute`method and make it submit dependent cells if these have not been executed.hope that give you something to start with.   might be related to https://github.com/davidhalter/jedi/issues/997",0,0,0.114,Carreau,Member
2018-01-14T00:00:00.000Z,0,@tacaswell @carreau @lukelbd any update on this issue?  i'd be willing to contribute to help fix it if someone can give me a little direction.,0.203,0,0,data4science,Other
2018-01-15T00:00:00.000Z,0,"press ctrl-shift-f to bring up the command palette. search for 'rtl' and select 'toggle rtl layout'. it should switch around.if the first language selected in your browser is arabic or hebrew, it currently selects rtl by default. ccing @samarsultan in case that needs refining.  thanks; see https://github.com/davidhalter/jedi/issues/1027",0,0,0,takluyver,Member
2018-01-17T00:00:00.000Z,0,is it possible that you've enabled `mouse_support` in ipython's config? scrolling is working in gnome-terminal for me.,0,0,0,takluyver,Member
2018-01-18T00:00:00.000Z,0,"i'm inclined to say it's a bug in lxterminal until proven otherwise, since it's working in a wide variety of other terminal emulators.cc @jonathanslenders - is prompt_toolkit doing anything that might cause problems with scrolling in the terminal?",0.188,0,0,takluyver,Member
2018-01-19T00:00:00.000Z,0,"what environment variables did you have to set? i don't know how tensorflow would make a difference to saving a notebook.  i guess you had to add those to path ? i don't think that should affect saving a notebook. :-s  double check that you have write permissions in your own documents folder?  i don't know exactly, i don't use windows very often. but if you right click on the folder, it's probably somwhere in its properties.i don't think it's very likely that that is the problem, i just don't have many other ideas what to suggest.",0,0,0,takluyver,Member
2018-01-21T00:00:00.000Z,0,"i am having what sounds like a related problem on linux. i do not have tensorflow installed, but i did just update `jupyter` and `notebook`.if i try create a create a notebook in a subdirectory, jupyter switches back to the root directory (`/`), and then fails to create the notebook because it doesn't have write permissions to `/`.",0.266,0,0,IanSudbery,Other
2018-01-22T00:00:00.000Z,0,@ellisonbg  how can i have access to notebook metadata within the notebook ?i need to rewrite some part of the metadata based on parameters which are generated after running notebook cells.,0,0,0,p2ya,Other
2018-01-23T00:00:00.000Z,0,"that could be a bit complicated and i am probably not the best person forthe question. in principle you would need to write an nbextension thatmodifies the notebook model, but that part of the code base is only asemi-public apion mon, jan 22, 2018 at 2:34 pm, p2ya <notifications@github.com> wrote:> @ellisonbg <https://github.com/ellisonbg> how can i have access to> notebook metadata within the notebook ?> i need to rewrite some part of the metadata based on parameters which are> generated after running notebook cells.>> â€”> you are receiving this because you were mentioned.> reply to this email directly, view it on github> <https://github.com/ipython/ipython/issues/6073#issuecomment-359593844>,> or mute the thread> <https://github.com/notifications/unsubscribe-auth/aabr0jlw_apx-a6qliopntahgtqwqxuxks5tnq0igajpzm4cjeee>> .>-- brian e. grangerassociate professor of physics and data sciencecal poly state university, san luis obispo@ellisonbg on twitter and githubbgranger@calpoly.edu and ellisonbg@gmail.com",0,0,0,ellisonbg,Member
2018-01-24T00:00:00.000Z,0.045,"anyone know how to turn this off? i would vote for case sensitive being default given past behaviour and usage patterns in python.  this seems to get rid of the bad column displays where it doesn't show you all the options.`c.terminalinteractiveshell.display_completions = 'readlinelike'`  does anyone know how to turn all new features off on tab completion and have the old, fast, reliable case sensitive tab completion?",0,0,0.031,cottrell,Other
2018-01-25T00:00:00.000Z,0.266,"> i did not realize ipython is still a thing,no worries> i assumed jupyter was a rebrand/replacement.yes and no. jupyter is the language agnostic part. ipython is still the tiny part that does python execution. that is to say you can use jupyter+ipython , jupyter+scala,  jupyter+haskell...and yes, i understood your problem, that you want to have a tab in a specific location, but not generally. the reason you can't get tabs is indeed because we replace by 4 spaces as many user copy past and end up with mix of tab and space. of course there are cases where you want to insert tabs. it's a tiny bit harder than in vim, emacs or any ""native"" application because of browser limitation. typically we have to stay away from any alt- or shift- related shortcut as otherwise we'll break non-english layout. you may think ""it's ok if a tine portion of user can't use some shortcut"", and we may agree that this may not be a big issue, though in general each time we've tried to extend shortcuts, we've hit roadblock, from the top of my head:  - typing `-` (minus) on a german keyboard was splitting cells, because minus needs `alt-` to be pressed.   - preventing french users from typing `|`   - preventing french users  from typing numbers(yes i used to have a french keyboard so i remember those one).we are thus relatively restricted. there are some plans to provide ""localized keymaps"", disable by default, but a click away, and then we can add more convenient shortcuts we know work on some layouts. for now i believe in jupyterlab(more info below) going to the ""edit"" menu and deactivate ""indent with space"" (or whatever the menu is named), should allow you to insert tabs, at least temporarily, then you can revert to ""indent with space"". yes it is inconvenient, and why i'm only suggesting it as a workaround. notebook 5.3 should already allow custom commands and keyboard shortcuts (help > edit keyboard shortcut). the commands can be registerd by `custom.js` or notebook extensions, so i believed you should ba able to include that with custom keybinding on your system, and if it works we'll be happy to include it. we would have to discuss the exact keyboard shortcut but worst case it's still `ctrl-p` then search for `insert a tab character` and then `enter` in the command palette.as for [jupyterlab](https://github.com/jupyterlab/jupyterlab) it's the new frontend (completely compatible with current notebook), that has been in dev for quite some time, and should be released soon (already unofficially released you can pip-install it). the team is currently polishing the docs.here is a not-so-recent screenshot to give you an idea:![1_nlqmkeckc7u70j-5ynpk0a](https://user-images.githubusercontent.com/335567/35403787-af136244-01b5-11e8-8574-68dce477bf3f.png)almost no code is shared with current notebook and most of the keyboard handling has been redone, so most tricky things should be fixed or easier to fix.",0,0,0,Carreau,Member
2018-01-26T00:00:00.000Z,0,"thanks for your explanations, @carreau.  i am probably a rare user, as i know very little about python, so my use is jupyter+gnuplot, jupyter+octave, jupyter+bash/file/fortran, for teaching purposes.because of that i must stick to the current versions that my sysadmin installs for me, cluster-wide, otherwise what i see and what the students see would not be the same. when jupyterlab is released, i may make use of it - next year.so the answer to my original question - is there a way to enter a raw tab into a `%%file` - is no.i appreciate the difficulties of encoding and i would not want to impose an english keyboard on french users.  but being in a browser offers a different opportunity, of using markup, to bypass local keyboard bindings.  is there a `%%file -translate-html ` option, so i could enter `&#9;` when i wanted a tab and have it translate into a raw tab when the file is written out?again, i am not looking for a universal handling of tab vs. space, just something specific to %%file cell, which is effectively a built-in text editor.  tab-based auto completion should not be enabled in those cells anyway, and so tab handling is a purely stylistic issue in those cells. whatever one's choice, an editor should enable the user to enter any character possible into the file, hence my asking for a ctl-v-like mode.finally, i do not understand that bit about custom.js. ctl-p (? you probably meant ctl-f to search) searches in the page, not in the pop-up that help->edit keyboard shortcuts generates, but in any case, ""insert a tab character"" is not one of the available options.where should custom.js be, to be noticed? - in the home ? somewhere in the .local or .config before the `jupyter notebook` server is launched? what should it contain to generate a toggle-like option in the menu?  if this route works, i would happily use it now, by telling students to download and place this file in their home spaces - a one-time operation.  or are you talking about options only available in the future (jupyterlab) ?  one other thought.  i just looked up the list of edit mode keystrokes:- tab : code completion or indent- shift-tab : tooltip- ctrl-] : indent- ctrl-[ : dedent- ctrl-a : select all- ctrl-z : undoetc.  and i see there is room for `ctrl-v : enter next character as-is. `",0,0,0,esternin,Other
2018-01-27T00:00:00.000Z,0,"this seems closely related to https://github.com/ipython/ipython/pull/10996.  this issue appears stale now, and should probably be closed.",0,0,0,davidlowryduda,Other
2018-01-30T00:00:00.000Z,0,"i think same thing:```pythonexception ignored in: <bound method image.__del__ of <tkinter.photoimage object at 0x7f7e6d8b29b0>>traceback (most recent call last):  file ""/usr/lib/python3.5/tkinter/__init__.py"", line 3359, in __del__    self.tk.call('image', 'delete', self.name)runtimeerror: main thread is not in main loopexception ignored in: <bound method image.__del__ of <tkinter.photoimage object at 0x7f7e6d568f28>>tcl_asyncdelete: async handler deleted by the wrong threadtraceback (most recent call last):aborted (core dumped)```ubuntu 16.04 with python 3:```pythonpython 3.5.2 (default, nov 23 2017, 16:37:01) type 'copyright', 'credits' or 'license' for more informationipython 6.2.1 -- an enhanced interactive python. type '?' for help.```",0.203,0,0.121,nateGeorge,Other
2018-02-01T00:00:00.000Z,0,"is there anything left to be resolved in this issue, or perhaps it can be closed now?",0,0,0,davidlowryduda,Other
2018-02-04T00:00:00.000Z,0,i might pr this. https://github.com/cottrell/ipython/commit/c07e32e1f996966e1322b679f6734816cfae567b  https://github.com/cottrell/ipython/commit/c07e32e1f996966e1322b679f6734816cfae567b,0,0,0,cottrell,Other
2018-02-09T00:00:00.000Z,0,"in ipython 3, this code should now be:```pythonimport ipywidgets as widgetsdef on_click(button):    create_code_cell('print(""hello world!"")')button = widgets.button(description=""show hello world code"")button.on_click(on_click)display(button)```regardless, when leaving the notebook and re-entering it, it appears that the on_click javascript gets executed again (even though no one has explicitly clicked the button), resulting in multiple input cells. is there a way to avoid this undesirable behavior?",0,0,0,barik,Other
2018-02-10T00:00:00.000Z,0,this is a persistent issue due to pyqt having a number of import-time configurations which are mutually exclusive.i suggest: a) importing `pyqt4` before you import anything from matplotlib (as mpl has enough logic to sort out what you imported and work with that).  this means you should not launch ipython with `--matplotlib=qt` b) import the `qtcore` from `matplotlib.backends.qt_compat` which uses the version matplotlib/ipython has already imported,0,0,0,tacaswell,Other
2018-02-11T00:00:00.000Z,0,"ipython doesn't do anything with bytecode directly - all your code is passed through to python to be executed, so it's still python considering that environment variable.one possibility is that python on windows checks for the environment variable when it starts, so setting it in the process doesn't affect anything. i guess you'd have to read the source code to be certain whether that's what's going on, though.",0,0,0,takluyver,Member
2018-02-14T00:00:00.000Z,0,"do you want to make a new inputhook for wxpython 4 with these changes? i.e. add `ipython.terminal.pt_inputhooks.wx4`. we don't use the `ipython.lib.inputhook*` ones any more.there's also a corresponding set of event loop integration pieces in ipykernel, which may need a `wx4` option: https://github.com/ipython/ipykernel/blob/2baf8160b23bb4a0678da2033099eff9423316ae/ipykernel/eventloops.py#l144or if you're confident that these changes won't break things for people still using wxpython 3, you could make the changes to the code in place.",0,0,0,takluyver,Member
2018-02-15T00:00:00.000Z,0,bump,0,0,0,karolyi,Other
2018-02-18T00:00:00.000Z,0,"i will like to work on this one, more info on this?",0,0,0,oldani,Other
2018-02-20T00:00:00.000Z,0,"i think paste is just one way of demonstrating the problem.using `ipython -im module` (or `ipython -i script`) the repl can be delayed while the module or script is loaded, making it easy to type in multiple lines without using paste at all.",0.031,0,0,groner,Other
2018-02-23T00:00:00.000Z,0.234,"sorry you're having trouble with this - i think part of the reason is that it's clear what you want to do in trivial examples (a single level of indentation for a `try:`) - but not so clear to read your intention when there are multiple `try` blocks nested. if that sounds like an infrequent case, it equally applies to `else` continuations for `if` `for` and `try` blocks. you can easily end up with arbitrary combinations of these nested, and we won't be able to infer what you mean. we tend to not transform text after you've typed it out, that way you see exactly what will get sent as a workaround - i use `ctrl-u` to just remove all indentation at the beginning with one key chord, and then re-indent if there are multiple levels involved.older versions of ipython (before 5) used to respect the `%autoindent` setting, but that does not seem to be the case anymore for newer default `prompt_toolkit` setup. it appears that [`rlipython`](https://github.com/ipython/rlipython) still honors it, but if you switch to using that you may find other edge cases (i just noticed that tabs don't get converted to spaces in rlipython, for example).  it looks like there still might be a use case for this magic - see #11008, for example. i think we should consider restoring it for the prompt_toolkit readline implementation instead of removing it (it still works as it used to with rlipython enabled).",0.172,0,0,ivanov,Member
2018-02-24T00:00:00.000Z,0,@ahmadryan - glad you got a workaround. @tacaswell is the orginal something we can/should reliably detect and then provide your suggested workaround?,0,0,0,ivanov,Member
2018-02-25T00:00:00.000Z,0,bump,0,0,0,karolyi,Other
2018-02-26T00:00:00.000Z,0,"this is a known limitation - see #62.  >  as for digging into the ipython source code do you have an entry where i should start looking as to where the pythondontwritebytecode is set? i can debug from there.we don't set or read it at all, as far as i know. it's used by python itself (which ipython runs on top of).  i think a magic command or option for it would be good (like the existing `%history -g pattern` for glob search). getting it integrated into the interface might be more of a push.",0,0,0,takluyver,Member
2018-02-27T00:00:00.000Z,0.333,"i am having a very simiiar/related issue: the shift-tab documentation inspector is extremely slow. i tried to follow your steps (like the jedi thing == false, i also updated jedi to 0.11) hoping to find a solution but i am still facing this annoying problem.the things i noticed are:- this morning i was not having this issues: i started noticing it after i shut down the notebook when i was having a cell running forever (doing like a join between two pandas dataframe - sized roughly 17mb each). - the shift-tab works fine if i call it for functions called from a small object like a list (e.g. lst.apply() is ok), but as soon as i call it from my ""big"" dataframe it gets stuck (e.g. df['column1'].apply() is a problem).- the documentation inspector shows immediately if i manually interrupt the kernel, suggesting that the documentation was ready but the kernel was still running for unknown reasons.i hope someone can help me.this is some information about my environment.> {'commit_hash': 'ca5443062', 'commit_source': 'installation', 'default_encoding': 'cp1252', 'ipython_path': 'c:\\users\\rusia\\anaconda3\\lib\\site-packages\\ipython', 'ipython_version': '6.2.1', 'os_name': 'nt', 'platform': 'windows-10-10.0.16299-sp0', 'sys_executable': 'c:\\users\\rusia\\anaconda3\\python.exe', 'sys_platform': 'win32', 'sys_version': '3.6.1 |anaconda 4.4.0 (64-bit)| (default, may 11 2017, '                '13:25:24) [msc v.1900 64 bit (amd64)]'}update: i even tried to re-install anaconda distribution and the whole notebook and the issue persists.",0.203,0.25,0,rusiano,Other
2018-03-01T00:00:00.000Z,0,"this can happen if you create a client before the engines are registered. are you starting this up automatically? can you verify that the engines are successfully registered with the controller?  running `python3 -m ipython kernel install` will fix this to use absolute paths, which we can't produce in pip wheels. a recent change in jupyter_client should allow us to use `python3` here, which ought to fix this.  this doesn't really matter for dev versions, but it is fixable if we follow the conventions adopted by most of our other packages at this point, which is to pull in setuptools unconditionally in setup.py and just blacklist the implicit egg-install.",0,0,0,minrk,Member
2018-03-02T00:00:00.000Z,0,same issue in firefox.,0,0,0,s13varun,Other
2018-03-03T00:00:00.000Z,0,"using shift + enter.i installed anaconda on another system. now it is working.on fri, mar 2, 2018 at 11:51 pm, thomas kluyver <notifications@github.com>wrote:> how are you trying to execute the cells?>> â€”> you are receiving this because you authored the thread.> reply to this email directly, view it on github> <https://github.com/ipython/ipython/issues/11027#issuecomment-370007040>,> or mute the thread> <https://github.com/notifications/unsubscribe-auth/ajpaqbv3k6axlrhni7veab9h4ithvevrks5tay2qgajpzm4syfo9>> .>",0,0,0,s13varun,Other
2018-03-04T00:00:00.000Z,0,"ditto same error appears with [plasmapy](https://github.com/plasmapy/plasmapy):```python>>> from plasmapy.atomic import particle# attributeerror>>> particle('he').<tab>```although, it works fine if we assign `particle` to a variable first:```python>>> from plasmapy.atomic import particle>>> x = particle('he')# works ok>>> x.<tab>```i am not sure if `threading` is responsible in this case as well.",0,0,0,ritiek,Other
2018-03-07T00:00:00.000Z,0,"sorry that i'm coming a bit late to the discussion ...i just encountered the exact problem described above: i created a magic function as suggested in the documentation (and in another example i was consulting), and i was surprised that the quotes were not removed from the arguments.i found a quick work-around. instead of writing as suggested in the docs:```pythonargs = parse_argstring(self.my_magic, line)```... i am now using:```pythonimport shlexargs = self.my_magic.parser.parse_args(shlex.split(line))```... and this seems to work fine.",0,0.258,0.125,mgeier,Other
2018-03-08T00:00:00.000Z,0,"the application logging is part of traitlets, a base library we use for various ipython and jupyter projects. specifically, it's set up in this method:https://github.com/ipython/traitlets/blob/3164ffb43167e9d1688046fbe0aefa424af5b58d/traitlets/config/application.py#l210we're happy to give you a few pointers like this without any money involved - helping new contributors get to grips with the project is part of our jobs, at least for some of us.",0,0,0,takluyver,Member
2018-03-09T00:00:00.000Z,0,bumpity bump,0,0,0,karolyi,Other
2018-03-12T00:00:00.000Z,0,"the issue in jedi has been fixed, so this should work from the next jedi release (0.12?).",0,0,0,takluyver,Member
2018-03-13T00:00:00.000Z,0,"i have good news and bad news in the form of pr #11041 . the good news is that this problem will go away for ipython 7.0. ;-)the bad news is that the changes are likely to break all existing input transformations (other than ast transformations, which are unaffected). have a look at [this doc page](https://github.com/takluyver/ipython/blob/96b86fb221893f13ba26644098edc4a20cdc0669/docs/source/config/inputtransforms.rst) to see the what's currently proposed for the new interface. it's not final until 7.0 is released, so if there are things you want from the new interface, now's the time to say so.sorry to break things underneath you, but i hope that the new interface will be easier to work with than the current one.  e.g. from a glance at your discussion on sympy, would it help for the ast transformer to have access to the string of code that the ast came from? or a way to pass data from a string/token transformer to an ast transformer?",0,0,0,takluyver,Member
2018-03-14T00:00:00.000Z,0,"printing too much data, let's say accidentally printing a gigantic numpy array, can make the kernel completely unresponsive and impossible to to terminate",0,0,0,JulesGM,Other
2018-03-18T00:00:00.000Z,0,"thanks @takluyver, however that works only for the current session. any new notebook will start with the rtl option on again. additionally, the tree page (http://localhost:8888/tree) is in rtl too...is there some global flag to turn off rtl option altogether?edit: ok, i changed the default language of the browser (chrome) from hebrew to english, and now everything works.",0,0,0,shahardo,Other
2018-03-19T00:00:00.000Z,0,can i work on this?,0,0,0,pulkitmaloo,Other
2018-03-21T00:00:00.000Z,0,bump,0,0,0,karolyi,Other
2018-03-22T00:00:00.000Z,0,"if it's a class you're writing, you can override the `__dir__` method which is used to find completions.  i don't think `__dir__()` is important for anything else, but i'm not 100% sure of that. possibly in this particular case, a smarter way would be to implement something similar to bunch that doesn't inherit from dict.",0,0,0,takluyver,Member
2018-03-26T00:00:00.000Z,0,"i had this problem (win 10), but it was solved by uninstalling nexus access client - if that is of any use to anyone. others report success uninstall networx. so if you have any software monitoring network traffic or using tunnels - try uninstalling those perhaps ?",0,0,0,rhkarls,Other
2018-03-27T00:00:00.000Z,0,@yoki were you able to get your code to work with the h2-level header numbering reseting properly? i'm getting something like: > section 1     - 1.1    - 1.2    - 1.3section 2    - 2.4 <--- should be 2.1i think this is the same issue the others discussed above.,0,0,0,kenaycock,Other
2018-03-28T00:00:00.000Z,0,i have the same issue with ipython 6.2.1 that i just pip installed.all my python stuffs are newly installed include scrapy.but in `scrapy shell ..`it begin spam the debug infowill this be fixed?,0,0,0,NewUserHa,Other
2018-03-31T00:00:00.000Z,0,"@takluyver hey, my chrome browser is set to english, yet i still having issues with rtl layout.is there another possiable solution?",0,0,0,almogtalker1992,Other
2018-04-01T00:00:00.000Z,0,"@takluyver ok great it shows me ""he-il""so i need to change it? how?",0,0,0,almogtalker1992,Other
2018-04-02T00:00:00.000Z,0,"it should be in browser settings somewhere. if there's a list of languages, it probably uses the top one on the list.  have you closed the browser and reopened it? maybe the language settings only affect it when you next start it. if that's not it, no idea...",0,0,0,takluyver,Member
2018-04-03T00:00:00.000Z,0,just ran into this issue using a `@classmethod` decorator.,0,0,0,tmattio,Other
2018-04-04T00:00:00.000Z,0,`'./<tab>` is fixed with ipython 6.3.0 (now it shows only paths) but not `./<tab>`.,0,0,0,gokceneraslan,Other
2018-04-08T00:00:00.000Z,0,"it's a fairly simple regex that tries to figure out what you want help on. we could probably extend it to cover simple literals (though the possibilities for floats are quite complex). but it would still go wrong with something like `(3 / 4).hex?`. we're trying to avoid evaluating everything before the `?`, so it can never handle everything.",0,0,0,takluyver,Member
2018-04-09T00:00:00.000Z,0,"when i change a module, i like to re-import it in my notebook. is there currently a way to restart the kernel in ipython?",0,0,0,apnewberry,Other
2018-04-10T00:00:00.000Z,0,"thanks, @takluyver .",0,0,0,apnewberry,Other
2018-04-12T00:00:00.000Z,0.333,"any updates on this?i came across this issue when looking to see if there has been any support for mypy in the jupyter ecosystem. seeing it approached as a cell magic didn't seem like the right direction for this as i feel that devs are either all in with the typechecking and want to run it on every cell or skip it all together.opt-in support looks like the right approach but i am not sure exactly how. potentially like @carreau mentioned a line magic to enable/disable? as far as requiring new infrastructure i don't think that is necessary, the error stream/messages look like they can cover this as regular errors rather than requiring something new. the only thing that i feel is important is that when executing a cell if it doesn't typecheck, _none_ of it is executed to allow using the run-cell functionality to check  errors without worrying about an inconsistent intermediate state with ill-typed code.",0.25,0,0.25,SpencerPark,Other
2018-04-13T00:00:00.000Z,0,"```colorama.init()``` messes with sys.stdout like this:```pythondef init(autoreset=false, convert=none, strip=none, wrap=true):...    sys.stdout = wrapped_stdout = \        wrap_stream(orig_stdout, convert, strip, autoreset, wrap)```commenting out that assignment (or anything downstream that results in calling init) fixes the problem.this is what wrap_stream looks like:```pythonfrom .ansitowin32 import ansitowin32def wrap_stream(stream, convert, strip, autoreset, wrap):    if wrap:        wrapper = ansitowin32(stream,            convert=convert, strip=strip, autoreset=autoreset)        if wrapper.should_wrap():            stream = wrapper.stream    return stream```",0.266,0,0,dnut,Other
2018-04-14T00:00:00.000Z,0,"iirc colorama will forget the ""original stdout"" if initializing twice (causes trouble when calling `colorama.deinit`) so it's not really recommended, but it should continue to work and shouldn't cause the hang described.i currently don't have access to a win 10 machine, and i can't reproduce this on windows 7.@dnut can you try to run:```pythonimport coloramacolorama.init()colorama.init()<ctrl+d>```and see if this causes trouble?also, please make sure you have the latest version of colorama installed.",0,0,0,wiggin15,Other
2018-04-15T00:00:00.000Z,0,"@apnewberry shameless plug, but you can also use an ide like [spyder](https://github.com/spyder-ide/spyder) which is integrated closely with ipython, where we have user module reloader which tells ipython to reload any local modules with changes automatically, all within the same session and without restarting or even clearing variables.",0,0,0,CAM-Gerlach,Other
2018-04-16T00:00:00.000Z,0,"there's a bit of setup that happens just after the cell where `%matplotlib inline` is called, i think. so if you set things in that cell, they can be overridden by ipython's setup. after that, things you change should (i hope) be kept between cells.  on windows with python 2.7, ipython also loads [win_unicode_console](https://pypi.org/project/win_unicode_console/), another library which wraps standard streams. it does this before loading colorama, so if you have initialised colorama yourself before starting ipython, you've probably got:- colorama streams, wrappin- win_unicode_console streams, wrapping- colorama streams again, wrapping- the regular python stdout/stderr objectsmaybe that combination causes a problem!python 3.6 effectively integrated win_unicode_console into the standard streams, so we can skip that layer of the stack, which might avoid this problem.it's also possible that we're missing some teardown code that's needed in the embedded use case.  i don't think jedi aims to deal with paths - the tricky bit is working out when we should call jedi and when to use other completion methods. we were using a rather error prone way of doing that. i'm hoping we can figure out something more robust, perhaps based on my new input transformation machinery.",0.094,0.312,0,takluyver,Member
2018-04-17T00:00:00.000Z,0,"it might work if you `import testmod` and then call the functions like `testmod.thisfunc()`.it's probably best to avoid autoreload if you're doing anything that's not totally straightforward. i think it was written as a comfort to users coming from matlab, who expect modules to work that way. it's not how python modules work, and autoreload does some moderately complicated tricks to try and make everything 'automatic'. the result is weird bugs like this, and it's not the easiest thing to debug.",0,0,0,takluyver,Member
2018-04-18T00:00:00.000Z,0,"i faced the same issue when testing this on a windows10 vm while checking the install of an exiftool. ipython was choking on `%matplotlib inline` and dumping this error: `unknownbackend: no event loop integration for 'inline'. supported event loops are: qt, qt4, qt5, gtk, gtk2, gtk3, tk, wx, pyglet, glut, osx`so i tried embedding the tkinter canvas instead `%matplotlib tk` as it was a supported event loop per the error message, and it worked. thanks for the comment @steowens",0,0,0,lloyd5389,Other
2018-04-19T00:00:00.000Z,0,"(sorry for submitting almost empty issue initially, fat fingers...)  @takluyver thanks for the info, i can confirm both `iptest` and `iptest3` pass fully with jedi 0.11.1.",0.281,0,0.203,boegel,Other
2018-04-21T00:00:00.000Z,0,you can try chrome://settings then go to advanced settings click on languges then remove arabic languge just like this ![untitled](https://user-images.githubusercontent.com/30294044/39082211-9bd09264-454f-11e8-8bf5-1db91ae719c1.png),0,0,0,ibraheemkhazbak,Other
2018-04-23T00:00:00.000Z,0,"still relevant, but i think it's pretty low priority - there would be little tangible benefit for some time until extension authors added the entry points to their packages. and i suspect most ipython extensions are not very actively developed.i also disagree with the 'good first issue' tag on this one - it's relatively self contained, but not exactly easy.",0,0.469,0,takluyver,Member
2018-04-29T00:00:00.000Z,0,"what version of the notebook package do you have, and what does `navigator.language` give you in your browser's javascript console?",0,0,0,takluyver,Member
2018-05-01T00:00:00.000Z,0,"thanks matthias, and well done on getting issue #11111.",0,0,0,takluyver,Member
2018-05-03T00:00:00.000Z,0,"> this doesn't come up oftenit does on our issue trackers!i'm trying to make headway on a new system of managing kernels, which will hopefully make identifying kernel types more consistent. in particular, the kernel type id `pyimport/kernel` in the new system will always refer to a kernel running on the same python interpreter as the parent process.but it's a big set of changes, it's hard to find any time to work on it when i'm not already tired, and i've had next to no design feedback on it (though @mpacer is starting to look at it - thanks m!), so i'm worried that what i build may not be that useful.  oops, i meant to include links to this work:https://github.com/takluyver/jupyter_kernel_mgmthttps://github.com/takluyver/jupyter_protocol",0.466,0.258,0.621,takluyver,Member
2018-05-08T00:00:00.000Z,0,"@takluyver  my navigator.language is hebrew although my default language set to english.i understand now that the problem comes from the browser and not from the jupyter, so i will fix it using efrat way.thanks for the help",0,0,0,tyanay,Other
2018-05-12T00:00:00.000Z,0,"cc @minrk , cc @takluyver @njsmith do you have any idea about what could have caused this ?  ok, that seem to be because now the first string in a module is actually tagged as the module docstring. see 3.6:```in [1]: ""q""~/dev/ipython/ipython/core/interactiveshell.py:2800 | module(body=[    expr(value=str(s='q')),  ])out[1]: 'q'```vs nightly:```in [2]: ""q""~/dev/ipython/ipython/core/interactiveshell.py:2800 | module(body=[], docstring='q')```so we likely need to special case empty module with docstring ? or is it something we need to report upstream ?",0,0,0,Carreau,Member
2018-05-15T00:00:00.000Z,0,"one option is to just change the cell's type to ""raw"".i don't believe there's any nice & easy solution to skip a code cell. however, for what it's worth, since jupyter 5.0 it is possible to add the tag `raises-exception` to a cell, and it will just display the exception and continue running the notebook as if nothing happened. so if you want jupyter to skip a cell, one option is to add the `raises-exception` tag to the cell and raise some exception at the beginning of the cell, like this:```pythonraise exception(""skipping this cell"")```jupyter will display an ugly stack trace, but at least it will skip the cell and keep running the following cells.the nice thing about this solution is that you can decide whether or not to skip a cell programmatically, for example define a function like this:```pythondef skip_if_linux():    import sys    if 'linux' in sys.platform:        raise exception(""skipping cell because we are on linux"")```then any cell that needs to be skipped because it's linux, just add:```pythonskip_if_linux()```perhaps a better solution would be to add a new ""skip"" tag to jupyter, so that the users would just have to tag the cells that must be skipped.",0.198,0,0,ageron,Other
2018-05-16T00:00:00.000Z,0,"additional information:as i suspect, i can create a new file if the folder does not have a space in it.hilariously, i created a notebook in the folder with a space when i first launched jupyter. this leads me to believe that upon reopening the directory causes some sort of change that makes this sort of thing happen.os: ![image](https://user-images.githubusercontent.com/30770221/40092406-d983cfea-5882-11e8-8ec9-99ffb4cd20cd.png)  oh yeah, it worked in `tree/onedrive/documents` but not in `tree/onedrive/documents/jupyter%20notebooks`leading me to believe it isn't related to onedrive",0,0,0,kelvinwop,Other
2018-05-17T00:00:00.000Z,0,"can you use the ""single"" mode instead of the ""exec"" (default) mode when parse to ast?",0.226,0,0,serhiy-storchaka,Other
2018-05-21T00:00:00.000Z,0,same problem on win8have you solved the problems?it's quite confused,0.266,0,0,EGG123321,Other
2018-05-23T00:00:00.000Z,0.47,it's been a month and a half and no one's even looked at this issue. could someone please have a look? it's a really annoying bug that impedes my work quite a lot and it's still present in version 6.4.0.,0,0.441,0,tsela,Other
2018-05-24T00:00:00.000Z,0,"would it help if first try `single`, and fallback to `exec`?",0,0,0,serhiy-storchaka,Other
2018-05-25T00:00:00.000Z,0,"3.3 is eol, so it seems appropriate to drop 3.3 in order to make dealing with async stuff more manageable.  i opened #11158 as a possibly simpler alternative. it recompiles empty modules with `single` and wraps that in a module. it does technically 'mess with the ast' to get back a module, but with a very minimal `ast.module(interactive.body)`. i also tested without wrapping it in a module, and if we left it as interactive everything would *probably* work because we really only ever do `for node in module.body`, but it's perhaps better to preserve the `ast.module` assumption.it's like @serhiy-storchaka's proposal, but the fallback is in the other direction, since most ipython inputs are multi-node inputs from notebooks these days, and currently this is only an issue for truly bare strings. this imposes the double-compile cost on the rarest and cheapest-compilation case, rather than the most-expensive long cells.i don't view this as a major issue because executing cells that are just a string literal is pretty rare, and not displaying what you have necessarily just typed directly into the input isn't a huge regression for users.",0,0,0,minrk,Member
2018-05-26T00:00:00.000Z,0,"ah. i think it might be a little premature to drop 3.4 support for ipython itself, but let's see how it goes with `@gen.coroutine` and `yield from`.",0,0,0,minrk,Member
2018-05-27T00:00:00.000Z,0,"i guess the idea was that an equation by itself (i.e. displayed with the `math` class) should be left aligned, like any other output would be. possibly it doesn't make sense for block equations in markdown. can you see a way of making the css selector more specific so it would differentiate between those cases?",0,0.156,0.422,takluyver,Member
2018-05-28T00:00:00.000Z,0,in jupyter just run a cell with the following contents `%config ipcompleter.use_jedi = false`,0,0,0,chorus12,Other
2018-05-29T00:00:00.000Z,0,"if a specific subprocess has got stuck, you can probably find it in the task manager and forcibly kill it that way. hopefully that lets the kernel continue.",0.7,0,0.797,takluyver,Member
2018-05-30T00:00:00.000Z,0,@effrat i tried this way and still no luck (including resetting).other recommendations? anyone?,0,0.484,0,DudkinM,Other
2018-06-01T00:00:00.000Z,0,i encontered the same issue. `sudo apt-get install --reinstall python-pip` solved it.,0,0,0,Pierrocana,Other
2018-06-02T00:00:00.000Z,0,"a possible workaround for now is to just suppress the warning, however, this may also suppress the warning when it is legitimate:```import warningswarnings.filterwarnings(    action='ignore', module='matplotlib.figure', category=userwarning,    message=('this figure includes axes that are not compatible with tight_layout, '             'so results might be incorrect.'))```",0,0,0,GergelyKalmar,Other
2018-06-03T00:00:00.000Z,0,"tried to reproduce, but this didn't work in jupyterlab==0.32.1 in linux, firefox and chromeat the same time this works in jupyter notebook.",0,0,0,arogozhnikov,Other
2018-06-04T00:00:00.000Z,0,"thank you for all this. i am wondering if there is any news on this issues? i've just noticed that prompt_toolkit 2.0.2 is released, but it is incompatible with ipython. thanks.",0,0,0,jcesardasilva,Other
2018-06-06T00:00:00.000Z,0,bump? i've seen probably  a dozen or so versions of this how-to/feature request in various github repos and stackoverflow posts along the way to this issue... including:https://groups.google.com/forum/#!topic/jupyter/lvhtvgubkxu (exactly my use-case)https://groups.google.com/d/msg/jupyter/qamkem52xn0/yqrk7pgragajhttps://github.com/jupyter/help/issues/298https://github.com/jupyter/jupyter/issues/106https://github.com/jupyter/notebook/issues/727https://github.com/jupyterlab/jupyterlab/issues/2044https://stackoverflow.com/questions/40371187/execute-jupyter-notebook-and-keep-attached-to-existing-kernel/40611297https://stackoverflow.com/questions/31382405/ipython-notebook-how-to-connect-to-existing-kernel?rq=1,0,0,0,ihnorton,Other
2018-06-07T00:00:00.000Z,0,"this seems like more of an os x thing than an ipython thing. can this issue be closed, or is there a desired change of behavior?",0,0,0,davidlowryduda,Other
2018-06-08T00:00:00.000Z,0,"> really unstablenot more unstable than they already are. you already use `normalize_outputs` to fix object hex addresses. i would just add one replacement rule: `<module>()` to `<module>`. that should pass in all ipython versions (for now).the `normalize_output` function is run on both the expected and generated notebook, so it should not require any re-generation of the expected notebooks.",0,0,0,Carreau,Member
2018-06-11T00:00:00.000Z,0,same here (`notimplementederror` on reloading `types`)    python 3.6.4    ipython 6.4.0    macos 10.13.2,0,0,0,Vict0rSch,Other
2018-06-15T00:00:00.000Z,0,try restarting the kernel in kernel option,0,0,0,kHimanshu1,Other
2018-06-20T00:00:00.000Z,0,"i'm dealing with a stuck notebook too: interrupt, restart, reconnect - none of them do anything. the `[*]` indicators remain next to cells as if they are queued to run but no cells get executed. the behavior began after running a cell containing:```filedir = ""20161214_rooftest""!ls -rc $filedir```which is strange because i have analogous cells elsewhere that run successfully. i'm not sure how/if `ls` could get stuck but otherwise my situation seems to match this issue.",0,0,0,patricktokeeffe,Other
2018-06-21T00:00:00.000Z,0,"it is likely an issue with autorelaod. reloading module is not something that is easy to do in python (it is not meant to be done). so there are a lot of edge cases. i would suggest to try to upgrade to python 3 first, which allow more stuff (and we dropped support for python 2, so any bug fix and feature will be on python 3 only).",0,0,0,Carreau,Member
2018-06-26T00:00:00.000Z,0.234,"as mentioned in [this thread](https://stackoverflow.com/questions/35161324/how-to-make-imports-closures-work-from-ipythons-embed/51036158#51036158), i post my code here. hopefully it can partially solve the problems. the code below also loads the startup files for ipython, which is missing from the origin code.```class interactiveshellembedenhanced(interactiveshellembed):    """"""    a workaround to issue https://github.com/ipython/ipython/issues/10695    in embedded ipython shell, new variables are created in locals() instead of globals()    and functions do not make closures for the locals.    examples:    if not embedded from a function, then nothing special needs to be done other than calling embed() defined below.    these code will work:        a=3; (lambda: a)()        import time; (lambda: time.time())()    if embedded from a function, in order to introduce new variables to global name space, we need to call    ipy.to_global() first and then call ipy.to_local() to come back        ipy.to_global()        a=3  # here we cannot access the local variables        ipy.to_local()        (lambda: a)()    it seems that a contextmanager to switch back automatically will not work:        with ipy.to_global_manager():            a=3            print((lambda: a)())    it may be because of that ipython compiles the whole cell and run it using exec(code, globals, locals).    but globals and locals are calculated at the time this context manager is defined.    """"""    @property    def user_global_ns(self):        if getattr(self, 'embedded_outside_func', false):            return self.user_ns        else:            return self.user_module.__dict__    def init_frame(self, frame):        if frame.f_code.co_name == '<module>': # if embedded outside a function            self.embedded_outside_func = true        else:  # if embedded from a function            self.embedded_outside_func = false            self._saved_user_ns = none            self._ns = {}            # make global variables for user access to the histories            self._ns['_ih'] = self.history_manager.input_hist_parsed            self._ns['_oh'] = self.history_manager.output_hist            self._ns['_dh'] = self.history_manager.dir_hist            # user aliases to input and output histories.  these shouldn't show up            # in %who, as they can have very large reprs.            self._ns['in']  = self.history_manager.input_hist_parsed            self._ns['out'] = self.history_manager.output_hist            # store myself as the public api!!!            # ns['get_ipython'] = self.get_ipython            self._ns['exit'] = self.exiter            self._ns['quit'] = self.exiter            self.to_global = self._to_global            self.to_local = self._to_local    def _to_global(self):        self._saved_user_ns = self.user_ns        assert not set(self._ns).intersection(self.user_module.__dict__)        self.user_ns = self.user_module.__dict__        self.user_ns.update(self._ns)    def _to_local(self):        if self._saved_user_ns is none:            return        for key in self._ns:            del self.user_ns[key]        self.user_ns = self._saved_user_ns    def share_locals(self):        """"""        share the locals to global manually        """"""        if (id(self.user_ns) != id(self.user_module.__dict__)):            self.user_module.__dict__.update(self.user_ns)def embed(local_ns=none, **kwargs):    """"""    based on ipython.terminal.embed.embed()    """"""    config = kwargs.get('config')    header = kwargs.pop('header', u'')    compile_flags = kwargs.pop('compile_flags', none)    if config is none:        config = load_default_config()        config.interactiveshellembedenhanced = config.terminalinteractiveshell        kwargs['config'] = config    #save ps1/ps2 if defined    ps1 = none    ps2 = none    try:        ps1 = sys.ps1        ps2 = sys.ps2    except attributeerror:        pass    #save previous instance    saved_shell_instance = interactiveshell._instance    if saved_shell_instance is not none:        cls = type(saved_shell_instance)        cls.clear_instance()    frame = sys._getframe(1)    # shell is the ipython instance returned from get_ipython()    # frame refers to the caller of this function    shell = interactiveshellembedenhanced.instance(_init_location_id='%s:%s' % (        frame.f_code.co_filename, frame.f_lineno), **kwargs)    shell.init_frame(frame)    #######################    # load the startup files and update the local_ns    ######################    # if local_ns is none:    #     local_ns = frame.f_locals    global_ns = frame.f_globals    global_ns['ipy'] = shell    global_ns['share_locals'] = shell.share_locals    startup_files = glob.glob(os.path.join(shell.profile_dir.startup_dir, '*.py'))    startup_files += glob.glob(os.path.join(shell.profile_dir.startup_dir, '*.ipy'))    if '__file__' in global_ns:        hasfile = true        cfile = global_ns['__file__']    else:        hasfile = false    for filename in sorted(startup_files):        if filename.endswith('.ipy'):            shell.safe_execfile_ipy(filename)        else:            global_ns['__file__'] = filename            shell.safe_execfile(filename, global_ns, raise_exceptions=true)  # this updates the global_ns    if hasfile:        global_ns['__file__'] = cfile    else:        del global_ns['__file__']    ########################    #  launch the shell    #######################    shell(local_ns=local_ns, header=header, stack_depth=2, compile_flags=compile_flags,          _call_location_id='%s:%s' % (frame.f_code.co_filename, frame.f_lineno))    interactiveshellembedenhanced.clear_instance()    #restore previous instance    if saved_shell_instance is not none:        cls = type(saved_shell_instance)        cls.clear_instance()        for subclass in cls._walk_mro():            subclass._instance = saved_shell_instance    if ps1 is not none:        sys.ps1 = ps1        sys.ps2 = ps2```",0.172,0,0,liushapku,Other
2018-06-28T00:00:00.000Z,0,"incidentally it seems this behavior is broken on python 2 as well, but in that case i'm not sure what the reason is...  > incidentally it seems this behavior is broken on python 2 as well, but in that case i'm not sure what the reason is...i see, this is #6611.  so that's intentional.  i don't agree with the solution though--it's even more brute-force than the python 3 bug since it basically breaks the intended behavior (although i understand why a workaround was needed...)on second thought, that *only* impacts code that was entered interactively.  it won't affect code from modules so i'm okay with that.  then we're just left with the python 3 issue which, unfortunately, impacts warnings regardless where they come from....  i believe a configuration option would be useful here.  while i understand the rationale behind #6680 it would also be nice to be able to get back more ""standard"" behavior w.r.t. warnings, even if it's not the default.that would do nothing to help with the upstream issue, but it would be good to have either way.",0,0.547,0,embray,Other
2018-06-30T00:00:00.000Z,0,"in python, check those environment variables, along with `sys.stdout.encoding` and `locale.getpreferredencoding()`.",0,0,0,takluyver,Member
2018-07-05T00:00:00.000Z,0,just ran into this. i'm positive ctrl-enter used to create a new line!?! but this issue would suggest i'm mistaken :(,0,0,0,dhirschfeld,Other
2018-07-06T00:00:00.000Z,0,"@takluyver, so how do we work around this? how can a cell's output embed or invoke an html file without sandboxing?i'm trying to integrate @ericmandel's javascript application into a notebook. in this scenario, my python code is invoked by a notebook cell. this code generates an html file in the working directory (which invokes @ericmandel's application), and outputs ``html(""<iframe src=""/files/dynamically-generated-file.html></iframe>"")`` into the cell.and then of course it gets sandboxed and everything falls over.i understand the rationale for sandboxing random unknown html files. but in this case, the html file is generated by code inside the cell, so can therefore be considered as trusted as the code is. so how do we fit this into the security model?  > i think there's a way for js code to create an iframe and then write into it, rather than having the browser load its contents with a separate request.i'll have to look into that. i'd also like to be able to open new browser tabs -- can js write code into a new tab?> we don't do any sanitisation on serving files, and we don't do anything around wasm at all.i think we figured out what happens there. my sandboxed html invokes @ericmandel's js, which tries to load some of its components (such as the wasm stuff) from ``/files/``. but because the document is sandboxed, every request to ``/files`` comes back with the login page instead.",0.094,0,0,o-smirnov,Other
2018-07-08T00:00:00.000Z,0,```in [4]: sys.stdout.encodingout[4]: 'ansi_x3.4-1968'in [5]: import localein [6]: locale.getpreferredencoding()out[6]: 'ansi_x3.4-1968'```,0,0,0,im-n1,Other
2018-07-09T00:00:00.000Z,0,"what code are you using to read the file? try using [the nbformat package](http://nbformat.readthedocs.io/en/latest/api.html).  only a subset of latex is rendered in the browser, using a javascript library called [mathjax](https://www.mathjax.org/).",0,0,0,takluyver,Member
2018-07-11T00:00:00.000Z,0,"`matches_limit` does not affect `dir()`, only completions. we set a limit because in some cases the completions data being sent back was big enough to slow things down. you can edit the code to increase the limit if you want, but there's no way to change it on a per-object level.",0,0,0,takluyver,Member
2018-07-14T00:00:00.000Z,0,"try `nbformat.read(sys.argv[1], as_version=4)` - that should use the correct encoding for you.",0,0,0,takluyver,Member
2018-07-16T00:00:00.000Z,0,"i think maybe we set a limit in the notebook frontend as well? that would make sense because we can't add a limit to every kernel simultaneously.neither of them should affect `dir()`, as far as i know. if that's behaving oddly, it's either something about the objects you're working with (e.g. maybe pandas has some limit of its own), or it's a limit in python (seems unlikely, but you never know).",0,0,0,takluyver,Member
2018-07-18T00:00:00.000Z,0,"use `pythonioencoding=utf_8` environment variable.from python 3.7, pep 538 will help you.  ```root@5111eb5cdf7e:/# localelocale: cannot set lc_ctype to default locale: no such file or directorylocale: cannot set lc_messages to default locale: no such file or directorylocale: cannot set lc_all to default locale: no such file or directorylang=en_us.utf-8```your lang environment variable is bad.  your system don't have `en_us.utf-8` locale.you can list what locale you can use by `locale -a | grep -i utf`chose right locale from the list, and set it to `lang` environment variable in your`.bashrc` or `.bash_profile`.",0,0,0.121,methane,Other
2018-07-20T00:00:00.000Z,0,"restarting the kernel solves it temporarily. what is the cause and the permanent fix?it was working fine on my box two days ago, and i have not changed anything.",0,0,0,ariansacct,Other
2018-07-21T00:00:00.000Z,0,it can be caused by many reasons like:1. your antivirus is blocking it.2. your code it taking too long to execute(due to hardware limitations).3. something is wrong with your python distribution package. (try reinstalling it),0,0,0,kHimanshu1,Other
2018-07-22T00:00:00.000Z,0,"i think this is overkill security implementation.at least, a config file can provide dangerously allow option.",0,0,0,stken2050,Other
2018-07-23T00:00:00.000Z,0,steps to workaround this problem (to enable debugging for embedded bokeh notebooks):```pip install -e git+https://github.com/minrk/ipython.git@aedb5d6d3a441dcdb7180ac9b5cc03f91329117b#egg=ipythonpip install -e git+https://github.com/minrk/ipykernel.git@d08f120988cfadeeedb25434101f86c51d382e35#egg=ipykernelpip install tornado==5.0.2```* `ipykernel` is necessary for the this branch of ipython to work.* `tornado` should be 5.0.2. version 5.1 still shows this error even with the proper branches of ipython and ipykernel.result:![image](https://user-images.githubusercontent.com/170910/43091012-368fb16e-8ed3-11e8-9d06-4c189e0cebae.png),0.266,0,0,axil,Other
2018-07-26T00:00:00.000Z,0,"which is your os?  maybe you can try with fontconfig 2.12.1-2, in some cases it works. check this out https://github.com/conda/conda/issues/4416",0,0,0,mosrosem,Other
2018-07-27T00:00:00.000Z,0,arch linux and fontconfig-2.13.0. thanks.,0,0,0,hubitor,Other
2018-07-31T00:00:00.000Z,0,"i don't particularly like the font/color.for what it is worth i preferred the version @sylvaincorlay proposed earlier. i understand that the font was closer to quantstack branding, but the change of color (and the brackets in color) were imho way stronger.  ![unnamed](https://user-images.githubusercontent.com/335567/43490111-227cfe6e-94d4-11e8-846a-34266402651b.png)if we change/update the logo i hope we'll have a complete description on how to re-do it instead of an example (what was kerned how), and have the hex values of color, spacing...etc. in particular of we wan to have side-branding, we would need a kit ""do your own logo"".",0.281,0.515,0,Carreau,Member
2018-08-01T00:00:00.000Z,0,this issue get resolved for me after upgrading to the latest version (`6.5.0`).,0,0,0,ramsrib,Other
2018-08-02T00:00:00.000Z,0,this problem is also happening for me in a simple for loop.  using chrome browser.,0,0,0,kurt-rhee,Other
2018-08-04T00:00:00.000Z,0,"sounds good to me, i haven't seen it in a while, we can reopen if it reappears.",0,0,0,stuaxo,Other
2018-08-05T00:00:00.000Z,0,"i'm on ipython 6.4, python 3.6.6 and i'm still getting this issue. specifically, if i do any `.groupby(""col"").apply(f)` in pandas for some function `f` that has a `set_trace()`, ipdb doesn't let me quit by typing `q` but rather keeps re-running to the next iteration.",0,0.258,0,alex-git-rd,Other
2018-08-08T00:00:00.000Z,0,this no longer happens![screenshot_20180808_191130](https://user-images.githubusercontent.com/426784/43869288-bcfc8f88-9b3f-11e8-9f28-7568317ac595.png),0,0,0,remram44,Other
2018-08-09T00:00:00.000Z,0,"one reproducible way to force jupyter to stop showing new output (and make the kernel hang) is to run ""cat"" in a cell with no arguments (on google chrome / ubuntu 16.04). if there is a way to solve this problem (send a ctrl-d to the kernel?), it might also solve the other looping problems.",0,0,0,grantrob,Other
2018-08-10T00:00:00.000Z,0,you can use pylab mode in ipython. simply run ipython --pylab in the terminal. that will launch ipython configured to be able to support the matplotlib gui backend,0,0,0,AbdlrhmanElmhdy,Other
2018-08-12T00:00:00.000Z,0,"same issue here. os is debian sid, fontconfig version `2.13.0-5`, ipython version `6.5.0_py36_0`.",0,0,0,JackieMium,Other
2018-08-13T00:00:00.000Z,0,"we can try some designs that colors the brackets as well. we will definitely offer a ""do your own logo kit"" and those versions will likely not need any custom kerning - mostly pick the font/color and type it out.i agree the different colors are stronger, but it would be much more difficult to come up with a set of colors that different projects can use and maintain a strong sense of brand. allowing people to pick any color is also really difficult for the same reason. one option would be to keep the blue for our official usage, and then find a small number of other colors that third party projects can use. how does that sound?in terms of the font, i am more than willing to do a walkthrough of the different fonts we tried if there is interest.any other feedback?",0,0,0.4,ellisonbg,Member
2018-08-16T00:00:00.000Z,0,does this issue need any more work?,0,0,0,a1shadows,Other
2018-08-18T00:00:00.000Z,0,it works,0,0,0,fedral,Other
2018-08-19T00:00:00.000Z,0,"yes it is also happening with me .. i thought it as antivirus problem but i think its not, because i had reinstalled it by disabling  my antivirus .. but it is not working still ... don't know what to do ... i had also tried another browser option like mozilla chrome microsoft edge also with internet explorer .. but it still not working.... somebody plzz help...",0,0,0,sasuketeam7,Other
2018-08-20T00:00:00.000Z,0,i am working on this,0,0,0,gustavoefeiche,Other
2018-08-22T00:00:00.000Z,0,just got bitten by this as well. how do people typically debug in jupyter notebook? using pdb is like juggling a grenade :(,0,0,0,WilliamCarlos,Other
2018-08-23T00:00:00.000Z,0,i think this is fixed in the latest ipython 7.0.  you have to install the dev version for now (master branch from github: https://ipython.readthedocs.io/en/latest/install/install.html#installing-the-development-version).,0,0,0,nateGeorge,Other
2018-08-25T00:00:00.000Z,0,"actually, i'm still having some problems when doing a matplotlib plot and sklearn random forests.  i have a plot that gets generated, then a bunch of random forests are fit, and it sometimes randomly quits out with the same 'async handler' error.",0,0,0,nateGeorge,Other
2018-08-26T00:00:00.000Z,0,"i cannot reproduce this with `types`, but i can reproduce this by reloading `deepreload` itself.ubuntu 18.04.1 ltscpython 3.6.5ipython 6.5.0",0,0,0,bmintz,Other
2018-08-28T00:00:00.000Z,0,"@carreau ```traceback (most recent call last):  file ""/home/qleegb/.local/lib/python3.6/site-packages/spyder/app/mainwindow.py"", line 3181, in main    mainwindow = run_spyder(app, options, args)  file ""/home/qleegb/.local/lib/python3.6/site-packages/spyder/app/mainwindow.py"", line 3057, in run_spyder    main.setup()  file ""/home/qleegb/.local/lib/python3.6/site-packages/spyder/app/mainwindow.py"", line 896, in setup    from spyder.plugins.ipythonconsole import ipythonconsole  file ""/home/qleegb/.local/lib/python3.6/site-packages/spyder/plugins/ipythonconsole.py"", line 59, in <module>    from spyder.widgets.ipythonconsole import clientwidget  file ""/home/qleegb/.local/lib/python3.6/site-packages/spyder/widgets/ipythonconsole/__init__.py"", line 12, in <module>    from .debugging import debuggingwidget  file ""/home/qleegb/.local/lib/python3.6/site-packages/spyder/widgets/ipythonconsole/debugging.py"", line 17, in <module>    from qtconsole.rich_jupyter_widget import richjupyterwidget  file ""/home/qleegb/.local/lib/python3.6/site-packages/qtconsole/rich_jupyter_widget.py"", line 14, in <module>    from .jupyter_widget import jupyterwidget  file ""/home/qleegb/.local/lib/python3.6/site-packages/qtconsole/jupyter_widget.py"", line 19, in <module>    from ipython.lib.lexers import ipythonlexer, ipython3lexer  file ""/home/qleegb/.local/lib/python3.6/site-packages/ipython/__init__.py"", line 55, in <module>    from .terminal.embed import embed  file ""/home/qleegb/.local/lib/python3.6/site-packages/ipython/terminal/embed.py"", line 16, in <module>    from ipython.terminal.interactiveshell import terminalinteractiveshell  file ""/home/qleegb/.local/lib/python3.6/site-packages/ipython/terminal/interactiveshell.py"", line 18, in <module>    from prompt_toolkit.document import document  file ""/home/qleegb/.local/lib/python3.6/site-packages/prompt_toolkit/__init__.py"", line 16, in <module>    from .interface import commandlineinterface  file ""/home/qleegb/.local/lib/python3.6/site-packages/prompt_toolkit/interface.py"", line 19, in <module>    from .application import application, abortaction  file ""/home/qleegb/.local/lib/python3.6/site-packages/prompt_toolkit/application/__init__.py"", line 2, in <module>    from .application import application  file ""/home/qleegb/.local/lib/python3.6/site-packages/prompt_toolkit/application/application.py"", line 3, in <module>    from prompt_toolkit.buffer import buffer  file ""/home/qleegb/.local/lib/python3.6/site-packages/prompt_toolkit/buffer.py"", line 9, in <module>    from .completion import completer, completion, completeevent  file ""/home/qleegb/.local/lib/python3.6/site-packages/prompt_toolkit/completion/__init__.py"", line 2, in <module>    from .base import completion, completer, threadedcompleter, dummycompleter, dynamiccompleter, completeevent, merge_completers, get_common_complete_suffix  file ""/home/qleegb/.local/lib/python3.6/site-packages/prompt_toolkit/completion/base.py"", line 4, in <module>    from prompt_toolkit.eventloop import generator_to_async_generator, asyncgeneratoritemimporterror: cannot import name 'generator_to_async_generator'```  successfully installed backcall-0.1.0 decorator-4.3.0 ipython-6.5.0 ipython-genutils-0.2.0 jedi-0.12.1 parso-0.3.1 pexpect-4.6.0 pickleshare-0.7.4 prompt-toolkit-2.0.4 ptyprocess-0.6.0 pygments-2.2.0 setuptools-40.2.0 simplegeneric-0.8.1 six-1.11.0 traitlets-4.3.2 wcwidth-0.1.7",0,0,0,leegb,Other
2018-08-29T00:00:00.000Z,0,@kelvinwop did you end up figuring this out? i recently ran into the exact same issue too.,0,0,0,abhishekbajpayee,Other
2018-09-04T00:00:00.000Z,0,@themightyoarfish this is a duplicate of #10627.,0,0,0,andportnoy,Other
2018-09-05T00:00:00.000Z,0,"that would work, the best way would be to actually mitm the zmq messages between the notebook server and the kernel (or just augment the notebook to log these). they contain close to ~all the informations you would need to see what users have executed. i'm going to assume the notebook servers are not modifiable by the users while the kernels might. this approach also have the advantage of working regardless of the kernel language.",0,0,0,Carreau,Member
2018-09-07T00:00:00.000Z,0,@carreau is anything blocking progress here?,0,0,0,andportnoy,Other
2018-09-08T00:00:00.000Z,0,"> is anything blocking progress here?hum, there are many factor to take into account. - jedi needs to stabilize (i'm working on trying to get funding for jedi). - figure out how to fold this option into jedi- figuring out the default. it mostly need a champion to push that forward on do the work.",0,0,0,Carreau,Member
2018-09-09T00:00:00.000Z,0,"i hit this all the time just because of ipython's slow startup. i often find myself writing a couple of lines of code in the time it takes to load, and only the first of them is executed. `--simple-prompt` and `rlwrap` makes it usable again, but disables all the useful tab completion.",0,0,0,marksteward,Other
2018-09-10T00:00:00.000Z,0,"oh, i should add that within the same build, the ipython in some of the pages does execute successfully! see for example this [rendered page](https://pvlib-python.readthedocs.io/en/latest/clearsky.html) and [source](https://github.com/pvlib/pvlib-python/blob/master/docs/sphinx/source/clearsky.rst). i've not been able to figure out the reasons why some pages work and others do not.",0,0,0,wholmgren,Other
2018-09-12T00:00:00.000Z,0.117,"thanks for testing and the in-depth review and trying to understand how it work.yes, one of the current limitation is that a loop get created/stopped for each execution. this is because we do some weird things with prompt_toolkit (actually starting and stopping prompt_toolkit in between each `exec`. so: - background task are not processed.  - non async code `>>> asyncio.create_task` does not run in aloop.actually the second one is done on purpose for people wanting to manipulate `loop` themselve. i'm pretty sure the following will work:```>>> await asyncio.sleep(0)... asyncio.create_task(aprint(""background task""))```it will force the thing to run in a loop.i'm guessing we would move toward always running a loop, so once ipython kernel 5.0 is out, you can try some of these features in notebook (or jupyter-console) and see if it fixes (some) of the problem. we'll have to figure out trio/curio, but for now in ipykernel, we just block on their `run` method, be we could likely find a way to interleave tasks of asyncio and trio/curio.i'm temptatively marking this as 7.0 (for more docs), but i think we'll stay with current limitation for 7.0 because async support is way overdue.(we're also pushing to have async-exec in core python in 3.8 if possible, to not have all these crazy hacks.)  apologies, most of the work here is volunteer work, and we do not have a lot of contributors/dev with windows machine and windows experience. so most of the time issues are fixed if someone is willing to put some elbow grease and provide a patch.if really this is blocking and you need payed support, you can talk to companies like anaconda, which do have developers with the right resources, and generally upstream the patches once they have a fix.it seem like in mintty `virtual_env` point to a non existing dir, that mean we'll need to figure out why, and what's the good behavior.maybe just catch `filenotfounderror` and exit the function without doing anything ? but that may be just a footgun.if you are unfamiliar with github/pull-request but can even just modify your local copy in a way that works and tell us how, that would be usefull. thanks.",0,0,0,Carreau,Member
2018-09-14T00:00:00.000Z,0,"we pushed more docs [here](https://ipython.readthedocs.io/en/latest/interactive/autoawait.html#autoawait), les me know if that's clearer.   gah... good catch. i'm not sure we'll try to fix this one which seem to be miss-labeled as async indeed:```in [1]: x = 1   ...: import asyncio   ...: loop = asyncio.get_event_loop()   ...: def f():   ...:     nonlocal x   ...:     x = 10000   ...: loopout[1]: <_unixselectoreventloop running=true closed=false debug=false>```",0,0,0,Carreau,Member
2018-09-18T00:00:00.000Z,0,is there any solution to this . kernal cannot be interrupted .for me it's happening with gridsearchcv in sklearn .,0,0,0,ashishanand7,Other
2018-09-24T00:00:00.000Z,0,"there is a bug here, and it's the behavior in the first example. ipython only intends to create the `_` variable *if you haven't defined it*. so if you do `_, a = 1, 10`, that disables the `_` as an alias for ` out[max(out.keys())]` because your code has explicitly defined what `_` should mean. this is the behavior you are seeing later on in your session. there appears to be a bug where we don't trigger this ""don't override user-defined `_`"" logic correctly if your assignment to `_` happens in the first input.",0.188,0,0,minrk,Member
2018-09-25T00:00:00.000Z,0,see https://github.com/ipython/ipykernel/commit/c1230aae30c5ab28691c8636dc55c2f3778d8add,0,0,0,Carreau,Member
2018-09-26T00:00:00.000Z,0,please please please fix this! i am constantly getting this issue.,0,0,0,olabreche,Other
2018-09-27T00:00:00.000Z,0,"you can use `ctrl-o` to force a new line.   it is a bug with a recent refactor, i was just trying telling you that you can use ctrl-o in the meantime if you wish to use 7.x  see #8478 and #8480 for context/historical discussions.",0,0,0,Carreau,Member
2018-09-28T00:00:00.000Z,0,"would you mind giving me a few examples (working and not workig) of what you expect, in order to provide test for the fixes ? i have some but just collecting a few and don't want to influence you.",0,0.469,0,Carreau,Member
2018-09-29T00:00:00.000Z,0,@carreau is someone working on this issue? i'd be happy to help out,0,0,0,Deborah-Digges,Other
2018-09-30T00:00:00.000Z,0,hi @carreau ! thanks so much for the detailed explanation and test cases.i was able to reproduce it locally with the dev version of ipython and will now start looking into the code for `shortcut.py` and `inputtransformer`.,0,0,0,Deborah-Digges,Other
2018-10-01T00:00:00.000Z,0,i'll do this for hacktoberfest.,0,0,0,mpenkov,Other
2018-10-02T00:00:00.000Z,0,"> actually, i got a regression with my fix. fixing it now.the pr #11354 is updated now.",0,0,0,bartskowron,Other
2018-10-03T00:00:00.000Z,0,"hi, i am still having the issue. i have so fare update libraries. below are details.**[edit]** : updating python version as well as ipykernel fixed it. the issue occured only with ipython but not python.**code**from sklearn.preprocessing import ordinalencoderenc = ordinalencoder()**stdout**```traceback (most recent call last):  file ""c:\users\antoine.ly\anaconda3\lib\site-packages\ipython\core\interactiveshell.py"", line 2881, in run_code    exec(code_obj, self.user_global_ns, self.user_ns)  file ""<ipython-input-1-0a61fe33cb2a>"", line 1, in <module>    from sklearn.preprocessing import ordinalencoder  file ""c:\users\antoine.ly\anaconda3\lib\site-packages\sklearn\preprocessing\__init__.py"", line 6, in <module>    from ._function_transformer import functiontransformer  file ""c:\users\antoine.ly\anaconda3\lib\site-packages\sklearn\preprocessing\_function_transformer.py"", line 5, in <module>    from ..utils.testing import assert_allclose_dense_sparse  file ""c:\users\antoine.ly\anaconda3\lib\site-packages\sklearn\utils\testing.py"", line 758, in <module>    import pytest  file ""c:\users\antoine.ly\anaconda3\lib\site-packages\pytest.py"", line 9, in <module>    from _pytest.config import main, usageerror, cmdline, hookspec, hookimpl  file ""c:\users\antoine.ly\anaconda3\lib\site-packages\_pytest\config\__init__.py"", line 19, in <module>    import _pytest.hookspec  # the extension point definitions  file ""c:\users\antoine.ly\anaconda3\lib\site-packages\_pytest\hookspec.py"", line 27, in <module>    @hookspec(historic=true, warn_on_impl=pytest_namespace)typeerror: __call__() got an unexpected keyword argument 'warn_on_impl'during handling of the above exception, another exception occurred:traceback (most recent call last):  file ""c:\users\antoine.ly\anaconda3\lib\site-packages\ipython\core\interactiveshell.py"", line 1821, in showtraceback    stb = value._render_traceback_()attributeerror: 'typeerror' object has no attribute '_render_traceback_'during handling of the above exception, another exception occurred:traceback (most recent call last):  file ""c:\users\antoine.ly\anaconda3\lib\site-packages\ipython\core\ultratb.py"", line 1132, in get_records    return _fixed_getinnerframes(etb, number_of_lines_of_context, tb_offset)  file ""c:\users\antoine.ly\anaconda3\lib\site-packages\ipython\core\ultratb.py"", line 313, in wrapped    return f(*args, **kwargs)  file ""c:\users\antoine.ly\anaconda3\lib\site-packages\ipython\core\ultratb.py"", line 358, in _fixed_getinnerframes    records = fix_frame_records_filenames(inspect.getinnerframes(etb, context))  file ""c:\users\antoine.ly\anaconda3\lib\inspect.py"", line 1459, in getinnerframes    frameinfo = (tb.tb_frame,) + getframeinfo(tb, context)  file ""c:\users\antoine.ly\anaconda3\lib\inspect.py"", line 1417, in getframeinfo    filename = getsourcefile(frame) or getfile(frame)  file ""c:\users\antoine.ly\anaconda3\lib\inspect.py"", line 677, in getsourcefile    if getattr(getmodule(object, filename), '__loader__', none) is not none:  file ""c:\users\antoine.ly\anaconda3\lib\inspect.py"", line 714, in getmodule    if ismodule(module) and hasattr(module, '__file__'):  file ""c:\users\antoine.ly\anaconda3\lib\site-packages\py\_vendored_packages\apipkg.py"", line 195, in __getattribute__    return getattr(getmod(), name)  file ""c:\users\antoine.ly\anaconda3\lib\site-packages\py\_vendored_packages\apipkg.py"", line 179, in getmod    x = importobj(modpath, none)  file ""c:\users\antoine.ly\anaconda3\lib\site-packages\py\_vendored_packages\apipkg.py"", line 69, in importobj    module = __import__(modpath, none, none, ['__doc__'])  file ""c:\users\antoine.ly\anaconda3\lib\site-packages\pytest.py"", line 9, in <module>    from _pytest.config import main, usageerror, cmdline, hookspec, hookimpl  file ""c:\users\antoine.ly\anaconda3\lib\site-packages\_pytest\config\__init__.py"", line 19, in <module>    import _pytest.hookspec  # the extension point definitions  file ""c:\users\antoine.ly\anaconda3\lib\site-packages\_pytest\hookspec.py"", line 27, in <module>    @hookspec(historic=true, warn_on_impl=pytest_namespace)typeerror: __call__() got an unexpected keyword argument 'warn_on_impl'```**version**3.5.6**requirements**alabaster==0.7.11art==2.3atomicwrites==1.2.1attrs==18.2.0awscli==1.14.25babel==2.6.0backcall==0.1.0certifi==2018.8.24chardet==3.0.4codecov==2.0.15colorama==0.3.9coverage==4.5.1cycler==0.10.0decorator==4.3.0docutils==0.14et-xmlfile==1.0.1idna==2.7imagesize==1.1.0ipykernel==5.0.0ipython==7.0.1ipython-genutils==0.2.0jdcal==1.4jedi==0.13.1jinja2==2.10jmespath==0.9.3jupyter-client==5.2.3jupyter-core==4.4.0kiwisolver==1.0.1markupsafe==1.0matplotlib==3.0.0more-itertools==4.3.0numpy==1.15.2openpyxl==2.5.8packaging==18.0pandas==0.23.4parso==0.3.1pathlib2==2.3.2pickleshare==0.7.5pluggy==0.7.1prompt-toolkit==2.0.5py==1.6.0pyasn1==0.4.2pycm==1.2pygments==2.2.0pyparsing==2.2.2pytest==3.8.1pytest-cov==2.6.0python-dateutil==2.6.1pytz==2018.5pyzmq==17.1.2requests==2.19.1rsa==3.4.2s3transfer==0.1.12scikit-learn==0.20.0scipy==1.1.0seaborn==0.9.0simplegeneric==0.8.1six==1.11.0snowballstemmer==1.2.1sphinx==1.8.1sphinxcontrib-websupport==1.1.0tornado==5.1.1traitlets==4.3.2urllib3==1.23wcwidth==0.1.7win-unicode-console==0.5wincertstore==0.2",0,0.203,0,Antoinelypro,Other
2018-10-04T00:00:00.000Z,0,maybe a hint: it thinks the error is in line 1. maybe the newlines are being removed?,0,0,0,dsblank,Other
2018-10-05T00:00:00.000Z,0,"thanks aniketbiprojit for your help. my code run ok in native terminal. following your instruction, reinstalled jupyter and also believe my browser (google chrome) is updated. when i the code, i still recieve the same error.thanks again for your help!",0,0,0,SamPyNewUser,Other
2018-10-06T00:00:00.000Z,0,"i can help out if i can get some guidance ðŸ˜„   i'm interested in helping out, can someone help me understand what's needed here? unsure what converting a script into content manager entails.",0,0,0,ProximaDas,Other
2018-10-08T00:00:00.000Z,0,it looks like this is specific to the `/` operator.  the [`delims`](https://github.com/ipython/ipython/blob/master/ipython/core/completer.py#l508) in the completer do not include `/` because it conflicts with path completion.,0.5,0,0,tonyfast,Other
2018-10-09T00:00:00.000Z,0,"oh, that's great! thanks for linking it.on tue 9 oct, 2018, 8:44 am gustavo efeiche, <notifications@github.com>wrote:> @gustavoefeiche <https://github.com/gustavoefeiche> i'm guessing this> should be tagged as 'notebook' now, and should belong to the notebook repo>> i have published a [wip] pull request> <https://github.com/jupyter/notebook/pull/4030> for this issue in the> notebook repository. just waiting for a member to reply ðŸ˜„>> â€”> you are receiving this because you commented.> reply to this email directly, view it on github> <https://github.com/ipython/ipython/issues/8562#issuecomment-428045373>,> or mute the thread> <https://github.com/notifications/unsubscribe-auth/aimsdkh-zzgbqpjfooneuz9h321puouuks5ujbr-gajpzm4fjy1c>> .>",0,0.287,0,Madhu94,Other
2018-10-10T00:00:00.000Z,0,here are the python and sqlite versions:```libsqlite3-0-3.25.0-1.1python3-3.6.5-3.4```and some other i guess might be relevant:```bash-4.4-107.1coreutils-8.30-1.2gcc8-8.2.1+r264010-1.1gettext-runtime-mini-0.19.8.1-9.1gettext-tools-mini-0.19.8.1-9.1glibc-2.27-6.1libdb-4_8-4.8.30-36.5libgdbm5-1.14.1-1.6libgdbm_compat4-1.14.1-1.6libncurses6-6.1-6.5libreadline7-7.0-2.1libstdc++6-8.2.1+r264010-1.1libzmq5-4.2.5-2.1linux-glibc-devel-4.18-1.1ncurses-utils-6.1-6.5python3-ipython_genutils-0.2.0-2.1python3-jedi-0.12.1-1.1python3-jsonschema-2.6.0-2.2python3-jupyter_client-5.2.3-4.1python3-jupyter_core-4.4.0-3.1python3-jupyter_ipyparallel-6.2.2-6.27python3-jupyter_ipywidgets-7.4.2-10.1python3-jupyter_nbconvert-5.4.0-15.11python3-jupyter_nbformat-4.4.0-3.1python3-jupyter_notebook-5.7.0-8.3python3-jupyter_qtconsole-4.4.1-5.2python3-jupyter_widgetsnbextension-3.4python3-nose-1.3.7-10.1python3-pexpect-4.6.0-2.1python3-pyparsing-2.2.0-2.1python3-pyzmq-17.1.2-1.1python3-setuptools-40.4.3-1.1python3-simplegeneric-0.8.1-8.4python3-simplejson-3.16.1-1.1python3-six-1.11.0-4.1python3-terminado-0.8.1-3.1python3-testpath-0.4.1-4.1python3-traitlets-4.3.2-4.1python3-wcwidth-0.1.7-2.1```,0,0,0,toddrme2178,Other
2018-10-11T00:00:00.000Z,0,there's a programmatic way to do that given by https://github.com/ipython/ipython/pull/11318.  changing the default behavior in ipython is discussed in that pr as well.,0,0,0,blink1073,Member
2018-10-12T00:00:00.000Z,0,"i'm having this same issue with jupyter notebook. i am running windows 10 64bit with jupyter notebook. i just uninstalled networx and i am now running code for ml hyperparamter tuning, i will reply back on the status.  my code has been running for about 2hrs now and no crash. seems to be good now, thanks guys ðŸ˜ƒ",0.734,0,0,sujan-sube,Other
2018-10-13T00:00:00.000Z,0.484,"in general we try to avoid cleaning up for the sake of cleaning up, it has many disadvantages:  - it often prevent from backporting patches, as now there are conflicts.  - it screw up git blame, and git bisect to find the root cause of a bug or the reason for change.  - it often may look like the same code but there may be some subtle behavior changes that are hard to track down. especially since that both do some purely stylistic change and some code refactor i'm a bit worried. there is also some stylistic changes that are both incoherent with the rest of the codebase (and against pep8, but we only partially follow that.)i'll try to review the code inline.   this mostly looks good, but as i said above we try to avoid stylistic fixes for the sake of stylistic fixes, and try to get changes separately as otherwise you have these tiny semantic issues that crop up, and make increase the risk of introducing a bug.   actually for `z=5` the second number in the tuple has changed. it's the `line number` (afaict). so why 4 instead of 1... ?  it may be that when we request `unique` we only request uniq wrt the 3rd column and sqlite is happy to change it's internal behavior and uniquify before sorting, thus returning the second iteration of `z=5` ?  that looks good to me.  > keep in mind that this could break the input hooks for ui toolkits which ipython has right now. (did you test that?)no i did not test, and this likely also bypass the pre and post execute hooks.this was mostly an experiment to see how much change was needed, and think about what internal api to deprecate. as we just released 7.0 i doubt i want to merge this in the 7.x branch.  > are there any news on this issue? was there any pull request already made?i don't believe any pull request was made. feel free to take it.   you can actually move that out of the for loop if you really want.   that seem more uniform, though that will conflict will already existing pr it would be better to do as separate changes. i'll see which pr is easier to apply first.   that's typically a change that's generally considered good, though this function is relatively simple, and that will make any further backport or history digging around this file more difficult. i dont' think it is really necessary.   i dont' think a space is needed here.   seem ok, here but not strictly equivalent. what if term_title is false-ish ? like empty string,  none, or empty list in a subclass ? does `toggle_set_term_title` allow non boolean values ?   that seem strait forward here, but actually the semantics are different, and i even believe some other branches in the code are wrong, in particular:```style_overrides = _style_overrides_linux``` and ```style_overrides = _style_overrides_light_bg```indeed, later on we do `style_overrides.update(self.highlighting_style_overrides)`, so if you assign something to `style_override` instead of using `update(...)` you will mutate the original. `_style_overrides_light_bg`, `_style_overrides_linux` and with your patch `_style_overrides_windows` which is surprising. so yes to deport them as global variable, but we need to be sure of what update() vs  assing will do.",0.125,0,0,Carreau,Member
2018-10-14T00:00:00.000Z,0,"i missed that.  but i don't really know anything about sql so i don't know why it might be happening.  i have confirmed the problem still occurs with sqlite 3.25.2, the latest version.  i don't know how serious the bug is so i would defer to your judgement.  of course a real fix is preferable, but if you think the problem is minor enough we can go with a known fail for the time being.",0.188,0,0.438,toddrme2178,Other
2018-10-15T00:00:00.000Z,0,"@lucianamarques whenever i start coding in a new area, i try to find examples in the current code. if you are on a unix-based system you could use `grep` to search the codebase for examples of ""skip_if"" and, by analogy, apply to the current problem.",0.266,0,0,dsblank,Other
2018-10-16T00:00:00.000Z,0.351,"please remove this behavior of overriding the settings in matplotlibrc. i understand that the (ugly) matplotlib defaults cause problems out of the box. however, i think the current behavior is extremely confusing for new users trying to change these defaults. for users who do not understand that `%matplotlib inline` is actually using an element of ipython (not matplotlib, not jupyter), the path to solving this problem can be long. it took me quite a while the first time. these default settings also seem to produce figures that are too small for modern monitors. a dpi of 72 times a 4.0"" height produces a figure less than 300 pixels high, which is a quarter the height of a 1920 x 1200 monitor, but figures rendered with these defaults always seem significantly smaller than this.i remember that in past years a line like`c.inlinebackend.rc` = {'dpi': 72, etc.}`appeared by default in one of the ipython config files. however, the current files created by `ipython profile create` make no mention of the inline backend. searching the ipython help for ""inlinebackend"" (no space) returns no results. the top results of googling ""c.inlinebackend.rc"" are threads of people discussing this issue, e.g. [here](https://stackoverflow.com/questions/35939989/matplotlib-configuration-for-inline-backend-in-jupyter-notebook).possible compromise: overwrite rc settings only if the current matplotlibrc file is not in the config directory, using `mpl.matplotlib_fname().startswith(mpl.get_configdir())` or similar. this would avoid problems for totally new users but would allow people to use matplotlibrc without having to learn about ipython config and insert a mysterious line into a file that does not exist in a fresh install.thanks for your time.",0.167,0.288,0.121,danielflanigan,Other
2018-10-17T00:00:00.000Z,0,"solving this is *almost* straightforward, but i think the interaction with `use_jedi` may cause some headaches. i see three reasonable ways to solve this:1. maintain two separate lists for the `use_jedi` and `not use_jedi` cases:```python    _matchers = {}    @property    def matchers(self):        """"""all active matcher routines for completion""""""        if self.use_jedi:            return self._matchers.setdefault('jedi', [                self.file_matches,                self.magic_matches,                self.dict_key_matches,            ])        else:            return self._matchers.setdefault('default', [                self.python_matches,                self.file_matches,                self.magic_matches,                self.python_func_kw_matches,                self.dict_key_matches,            ])```this will fix the issue as reported by making the lists persistent and mutable, *but* it means that if you use `set_custom_completer`, then change the value of `self.completer.use_jedi`, your custom completers will be wiped out.2. make custom completers always come before the default completers and use a separate `custom_matchers` attribute. in this, you'd set `custom_matchers` in the `ipcompleter` constructor to `[]`, then `matchers` becomes:```python    @property    def matchers(self):        """"""all active matcher routines for completion""""""        if self.use_jedi:            return [*self.custom_matchers,                self.file_matches,                self.magic_matches,                self.dict_key_matches,            ]        else:            return [*self.custom_matchers,                self.python_matches,                self.file_matches,                self.magic_matches,                self.python_func_kw_matches,                self.dict_key_matches,            ]```an alternate version of this is to allow custom matches to come either before or after the other matchers, but never be interpolated between them.3. change `use_jedi` to be a property that dynamically inserts or removes the python matchers when toggled. this would be somewhat complicated to implement, but once done the worst side effect would be that order would not be preserved if you inserted a custom matcher between one of the non-jedi matchers and one of the jedi-matchers, then turned jedi on and off again.",0,0,0,pganssle,Other
2018-10-18T00:00:00.000Z,0,has any pull request been made on this? i'd like ti give it a try!,0,0,0,LucianaMarques,Other
2018-10-20T00:00:00.000Z,0,closed by #11402,0,0,0,Carreau,Member
2018-10-22T00:00:00.000Z,0,i think adding `self.custom_matchers` to the front of the list makes the most sense to me. thanks for digging into this!,0,0,0,minrk,Member
2018-10-24T00:00:00.000Z,0,"@carreau trying to reproduce this. can you provide an example? i'm on macos 10.14 using python 3.6 and a fresh pull of ipython (running in a virtualenv).```(ipython) $ bin/ipythonpython 3.6.5 (default, apr 25 2018, 14:23:58)type 'copyright', 'credits' or 'license' for more informationipython 7.1.0.dev -- an enhanced interactive python. type '?' for help.in [1]: raise---------------------------------------------------------------------------runtimeerror                              traceback (most recent call last)<ipython-input-1-9c9a2cba73bf> in <module>----> 1 raiseruntimeerror: no active exception to reraisein [2]: raise valueerror('\v')---------------------------------------------------------------------------valueerror                                traceback (most recent call last)<ipython-input-2-47eaec54718e> in <module>----> 1 raise valueerror('\v')valueerror:in [3]:```note: the above is colored properly.  ahh, understood. i'll take a look.",0.203,0,0,mrecachinas,Other
2018-10-25T00:00:00.000Z,0.917,"i could have a related issue.attempts at timing set intersection operations (that work perfectly well otherwise) fail:```{python}in [34]: %timeit s & {2}---------------------------------------------------------------------------typeerror                                 traceback (most recent call last)<ipython-input-34-c6066eb98afc> in <module>()----> 1 get_ipython().run_line_magic('timeit', 's & {2}')~/.local/lib/python3.6/site-packages/ipython/core/interactiveshell.py in run_line_magic(self, magic_name, line, _stack_depth)   2093                 kwargs['local_ns'] = sys._getframe(stack_depth).f_locals   2094             with self.builtin_trap:-> 2095                 result = fn(*args,**kwargs)   2096             return result   2097 <decorator-gen-61> in timeit(self, line, cell, local_ns)~/.local/lib/python3.6/site-packages/ipython/core/magic.py in <lambda>(f, *a, **k)    185     # but it's overkill for just that one bit of state.    186     def magic_deco(arg):--> 187         call = lambda f, *a, **k: f(*a, **k)    188     189         if callable(arg):~/.local/lib/python3.6/site-packages/ipython/core/magics/execution.py in timeit(self, line, cell, local_ns)   1096             for index in range(0, 10):   1097                 number = 10 ** index-> 1098                 time_number = timer.timeit(number)   1099                 if time_number >= 0.2:   1100                     break~/.local/lib/python3.6/site-packages/ipython/core/magics/execution.py in timeit(self, number)    158         gc.disable()    159         try:--> 160             timing = self.inner(it, self.timer)    161         finally:    162             if gcold:<magic-timeit> in inner(_it, _timer)typeerror: unsupported operand type(s) for &: 'set' and 'int'```and:```{python}in [40]: %timeit s.intersection({2})---------------------------------------------------------------------------typeerror                                 traceback (most recent call last)<ipython-input-40-d2cf5cc5314f> in <module>()----> 1 get_ipython().run_line_magic('timeit', 's.intersection({2})')~/.local/lib/python3.6/site-packages/ipython/core/interactiveshell.py in run_line_magic(self, magic_name, line, _stack_depth)   2093                 kwargs['local_ns'] = sys._getframe(stack_depth).f_locals   2094             with self.builtin_trap:-> 2095                 result = fn(*args,**kwargs)   2096             return result   2097 <decorator-gen-61> in timeit(self, line, cell, local_ns)~/.local/lib/python3.6/site-packages/ipython/core/magic.py in <lambda>(f, *a, **k)    185     # but it's overkill for just that one bit of state.    186     def magic_deco(arg):--> 187         call = lambda f, *a, **k: f(*a, **k)    188     189         if callable(arg):~/.local/lib/python3.6/site-packages/ipython/core/magics/execution.py in timeit(self, line, cell, local_ns)   1096             for index in range(0, 10):   1097                 number = 10 ** index-> 1098                 time_number = timer.timeit(number)   1099                 if time_number >= 0.2:   1100                     break~/.local/lib/python3.6/site-packages/ipython/core/magics/execution.py in timeit(self, number)    158         gc.disable()    159         try:--> 160             timing = self.inner(it, self.timer)    161         finally:    162             if gcold:<magic-timeit> in inner(_it, _timer)typeerror: 'int' object is not iterable```doubling the braces bypasses the issue:```{python}in [44]: %timeit s.intersection({{2}})242 ns Â± 23.2 ns per loop (mean Â± std. dev. of 7 runs, 1000000 loops each)in [45]: %timeit s & {{2}}174 ns Â± 22.5 ns per loop (mean Â± std. dev. of 7 runs, 1000000 loops each)```",0.558,0,0,blaiseli,Other
2018-10-26T00:00:00.000Z,0,"i can reproduce a very similar issue (can't be sure it's the same) pretty easily in ipython 6.5 and 7:```ipython -c ""import sys; sys.tracebacklimit=0; a""```note that i can't reproduce it in python:```python -c ""import sys; sys.tracebacklimit=0; a"" nameerror: name 'a' is not defined```the only workaround i could find was to set `sys.tracebacklimit=none`:```ipython -c ""import sys; sys.tracebacklimit=none; a""---------------------------------------------------------------------------nameerror                                 traceback (most recent call last)<ipython-input-1-05b18c546f64> in <module>----> 1 import sys; sys.tracebacklimit=none; anameerror: name 'a' is not defined```  i can also do something a little more complicated, which shows that the problem is not just the value 0, but there may be something wrong with the way ipython interacts with python when `sys.tracebacklimit` is set to a value.```python 3.7.1 (default, oct 23 2018, 19:19:42)type 'copyright', 'credits' or 'license' for more informationipython 6.5.0 -- an enhanced interactive python. type '?' for help.in [1]: def foo():   ...:     def bar():   ...:         1/0   ...:     bar()   ...: in [2]: foo()---------------------------------------------------------------------------zerodivisionerror                         traceback (most recent call last)<ipython-input-2-c19b6d9633cf> in <module>()----> 1 foo()<ipython-input-1-f22da8730e15> in foo()      2     def bar():      3         1/0----> 4     bar()      5<ipython-input-1-f22da8730e15> in bar()      1 def foo():      2     def bar():----> 3         1/0      4     bar()      5zerodivisionerror: division by zeroin [3]: import sysin [4]: sys.tracebacklimit=2in [5]: foo()error:root:internal python error in the inspect module.below is the traceback from this internal error.traceback (most recent call last):  file ""/export/miniconda/miniconda/envs/test-ipython/lib/python3.7/site-packages/ipython/core/interactiveshell.py"", line 2961, in run_code    exec(code_obj, self.user_global_ns, self.user_ns)  file ""<ipython-input-5-c19b6d9633cf>"", line 1, in <module>    foo()zerodivisionerror: division by zeroduring handling of the above exception, another exception occurred:traceback (most recent call last):  file ""/export/miniconda/miniconda/envs/test-ipython/lib/python3.7/site-packages/ipython/core/interactiveshell.py"", line 1863, in showtraceback    stb = value._render_traceback_()attributeerror: 'zerodivisionerror' object has no attribute '_render_traceback_'during handling of the above exception, another exception occurred:traceback (most recent call last):  file ""/export/miniconda/miniconda/envs/test-ipython/lib/python3.7/site-packages/ipython/core/ultratb.py"", line 1095, in get_records    return _fixed_getinnerframes(etb, number_of_lines_of_context, tb_offset)  file ""/export/miniconda/miniconda/envs/test-ipython/lib/python3.7/site-packages/ipython/core/ultratb.py"", line 311, in wrapped    return f(*args, **kwargs)assertionerror---------------------------------------------------------------------------```",0,0.469,0,olaurino,Other
2018-10-27T00:00:00.000Z,0,"i don't have any answer on that, `pretty_print` is relatively rarely used, and not the best api imho. my take would be in your `_repr_pretty_` to intercept the `pp` argument and try to implement a kind-of ""dedent"" functionality. not sure how easy it would be.",0,0.621,0,Carreau,Member
2018-10-28T00:00:00.000Z,0,closed,0,0,0,aryeksa,Other
2018-10-29T00:00:00.000Z,0,now [reviewnb](https://reviewnb.com) is another option for visual diff'ing of notebooks stored on github.disclaimer: i built reviewnb.,0,0,0,amit1rrr,Other
2018-10-30T00:00:00.000Z,0,"our goal here is to get something like the following. once it is working we can refine a nd get a better user interface: ```$ ipythonpython 3.6.5 | packaged by conda-forge | (default, apr  6 2018, 13:44:09)type 'copyright', 'credits' or 'license' for more informationipython 7.2.0.dev -- an enhanced interactive python. type '?' for help.in [1]: class foo:   ...:     pass   ...:in [2]: class bar(foo):   ...:     pass   ...:in [3]: foo?init signature: foo()docstring:      <no docstring>type:           typesubclasses:      - bar    <- that is new and useful```here we have only one subclass, we probably want to limit to the first few subclasses if we have hundreds. ## how to implement that. 1) make sure you have ipython working on your machine. we recommend installing anaconda. and then `conda install ipython`2) clone this repository:```$ git clone https://github.com/ipython/ipython```cd into the repository and do a dev-install : ```$ cd ipython$ pip install -e . ```now when you start `$ ipython` , the third live should say something like `7.2.0.dev` if you see dev, then all s good. this mean that you run ipython from the source, and noot from the install packages. you are officially a developper now. time to do modifications to the source code. they will be taken into account everytime  you restart ipython . in our case we want to modify `ipython/core/oinspect.py`. around line 830 find the line:```if inspect.isclass(obj):```under this block we want to modify `out`,  to contain the list of subclasses. we can get all the subclasses of `obj` by using `obj__subclasses()`as we want a something that look nice to the user we are actually interested in in each subclass name, and not the subclass them selves. that is to say we want to have:`subclasses:      - bar` and not `subclasses:      - <class bar at 0x123456>`so let's so around line 862: ```names = [sub.__name__ for sub in obj.__subclasses__()]```we now want to join all the names by commas for example:```all_names = ', '.join(names)```and let's now put that into `out` under the names `subclasses`.::```out['subclasses'] = all_names```good ! we've done the hard work. now close to line 642 find `elif info['isclass']`, modify close to the end of the block to look like : ```diff append_field(_mime, 'file', 'file') append_field(_mime, 'type', 'type_name')+append_field(_mime, 'subclasses', 'subclasses') # line added```save the file, open ipython and try the code at the top of this comment.if it works will go through how to commit it push it on github ad make a pull-request   ouch, i missed this one. i fixed the github formatting. what is your usecase for changing syntaxerror ? it seem likley that if you mess with python internals you will have unintended behavior. i'm unsure if we can fix that. we try to catch syntaxerror (and subclasses), but if you replace that, then the exception goes through all the exception catching mechanisme.   it's buggy but in ipython you cat use autocall: ``` $ ipythonautocall 1python 3.6.5 | packaged by conda-forge | (default, apr  6 2018, 13:44:09)type 'copyright', 'credits' or 'license' for more informationipython 7.2.0.dev -- an enhanced interactive python. type '?' for help.in [1]: autocall 1automatic calling is: smartin [2]: print 'hi'------> print('hi')hi```that may be a better place to look at.",0.094,0,0,Carreau,Member
2018-10-31T00:00:00.000Z,0,could i work on this?,0,0,0,emjobson,Other
2018-11-01T00:00:00.000Z,0,"following some question about branching/forking the repository, in particular do you need to do a branch, or to fork before making any changes. it is imho, mostly a question of taste, and where/when to put the complexity. some people will tend to - before doing any work â€“ create a new branch:```$ git branch a-new-name$ git checkout a-new-name```that is typically creating a named alternate reality that diverge from `master`, at the time you wrote `git branch a-new-name`, it is in no way mandatory â€“ branch names are _convenience_ names for human, and can be anyway move around, renamed after the fact. it is also in no way mandatory for the names of the branch on your local machine to match the names on github. it is also perfectly fine to push `master` on github. you cannot do anything wrong as you do not have anyway permission to push on this repository. you can only screw-up your fork, and if anything as branch names are _convenience_ name they can always be fixed after the fact. here is a gif of me pushing on my local master branch to the master branch of my github fork, and then pushing my local master branch to another name. ![example push](https://user-images.githubusercontent.com/335567/47865715-2806f400-ddba-11e8-9259-f7069963fc32.gif)here are some further instructions once your code is ready: - feel free to commit any time: `git add <changed file>`, `git commit`, write you commit message and `<esc>wq` to save and quit (or `git commit -a -m ""message for the commit""`). - for ipython (press the fork button at the top right of the page).  - add your fork at as `remote` of your clone: `git remote add cmentzel git://github.com/cmentzel/ipython` - push to your repository: `git push cmentzel` (here you can put more option but that is sufficient)git will tell you something like: ```$ git push cmentzel enumerating objects: 5, done.......remote: create a pull request for 'another-name' on github by visiting:remote:      https://github.com/cmentzel/ipython/pull/new/another-nameremote:to ssh://github.com/cmentzel/ipython * [new branch]          master -> master```visit the above url and submit the pull request. we can figure out the rest from there. in particular once you have submitted the pull request that would allow me to do extra fixes and the given branch if necessary. git is complex and take some time to grasp, but regardless of what you do you will have a really hard time breaking anything.",0,0.2,0,Carreau,Member
2018-11-02T00:00:00.000Z,0,"hum, that is likely a weird interaction with autoawait.",0,0,0,Carreau,Member
2018-11-03T00:00:00.000Z,0,"i just had the same problem with the `%config` magic:    %config inlinebackend.figure_formats={'png'}which led to the very-hard-to-diagnose error:```---------------------------------------------------------------------------nameerror                                 traceback (most recent call last)<ipython-input-13-3733ff7e8826> in <module>----> 1 get_ipython().run_line_magic('config', ""inlinebackend.figure_formats={'png'}"")~/git/ipython/ipython/core/interactiveshell.py in run_line_magic(self, magic_name, line, _stack_depth)   2283                 kwargs['local_ns'] = sys._getframe(stack_depth).f_locals   2284             with self.builtin_trap:-> 2285                 result = fn(*args,**kwargs)   2286             return result   2287 <decorator-gen-49> in config(self, s)~/git/ipython/ipython/core/magic.py in <lambda>(f, *a, **k)    185     # but it's overkill for just that one bit of state.    186     def magic_deco(arg):--> 187         call = lambda f, *a, **k: f(*a, **k)    188     189         if callable(arg):~/git/ipython/ipython/core/magics/config.py in config(self, s)    150         # unquoted args to eval in user_ns    151         cfg = config()--> 152         exec(""cfg.""+line, locals(), self.shell.user_ns)    153     154         for configurable in configurables:<string> in <module>nameerror: name 'png' is not defined```to add even more confusion, it works fine when i use two formats:    %config inlinebackend.figure_formats={'svg', 'pdf'}@takluyver > there's no need for it on timeit, but for historical reasons it does that on all `%magic` and `!system` commands.if there is no need, is it possible to disable this confusing behavior?just out of interest, what are the magic functions that actually use `{}` string interpolation?",0.172,0,0,mgeier,Other
2018-11-04T00:00:00.000Z,0,"@proximadas i'd like to take a shot at this, if you aren't working on it? @carreau https://github.com/nteract/cabinet seems to have similar goals",0,0,0,Madhu94,Other
2018-11-06T00:00:00.000Z,0,"what's the status on this? :) i know there's a [workaround extension for the classic notebook](https://github.com/ipython-contrib/jupyter_contrib_nbextensions/tree/master/src/jupyter_contrib_nbextensions/nbextensions/runtools), and as @takluyver points out [here](https://github.com/ipython/ipython/pull/4993#issuecomment-369552684),> since notebook 5.1 (pr jupyter/notebook#2549), you can also tag a cell with raises-exception to indicate that an exception is expected; then execution will continue through that cell.so effectively, the behavior *can* be achieved with stock jupyter notebook, although it takes a while to figure it out. as for the new jupyterlab interface, these features are also being discussed on its own issue tracker (https://github.com/jupyterlab/jupyterlab/issues/4496, https://github.com/jupyterlab/jupyterlab/issues/2412). does this mean this issue can be closed?",0,0,0,dlukes,Other
2018-11-07T00:00:00.000Z,0,@carreau what was the use case for this ?,0,0,0,Madhu94,Other
2018-11-08T00:00:00.000Z,0,"you did the pr, i only guided you ! happy to have your contributions ! are you going to contribute regularly now ?",0,0,0,Carreau,Member
2018-11-09T00:00:00.000Z,0,i have the same problem :(,0,0,0.438,Sophie-Germain,Other
2018-11-10T00:00:00.000Z,0,i moved this to the notebook - https://github.com/jupyter/notebook/issues/4189,0,0,0,Madhu94,Other
2018-11-11T00:00:00.000Z,0,i use jupyter themes and it's awesome:https://github.com/dunovank/jupyter-themes,0,0,0,ymost,Other
2018-11-12T00:00:00.000Z,0,same here. have to redo a very long calculation,0,0,0,cristianmtr,Other
2018-11-13T00:00:00.000Z,0.333,interrupt is still broken. i have to restart and reload my imports every time.,0.531,0,0,IMBurbank,Other
2018-11-15T00:00:00.000Z,0,"i do it using ;\cv2.imshow('image', im) ;\ cv2.waitkey(0) ;\ cv2.destroyallwindows()",0,0,0,yuezhilanyi,Other
2018-11-18T00:00:00.000Z,0,any answers here?,0,0,0,nmaiorana,Other
2018-11-20T00:00:00.000Z,0.828,"oh, i didn't think it'd attach to this issue. anyway, the reason it fails is that when we have```async with aiohttp.clientsession() as session:    pass|   # < cursor is there```it runs `check_complete` on each line ending, which, in turn, executes `compile_command`, and the latter one raises a `syntaxerror` because 'async with' is used outside of the async function.in my fork i just muted that `syntaxerror` but it's certainly not the brightest way to fix that, lol.possible solutions/ideas: - should check if the `autoawait` is turned on. if it is, could ignore that specific `syntaxerror` case. i don't think it's a good solution, but maybe i'm also overcomplicating things. -  if the autoawait's on, feed the `compile_command()` with the code wrapped with the `_asyncify()`. i guess, this way it won't raise `syntaxerror`, but i'm not sure if the newline issue will be resolved because `_asyncify()` itself adds some levels of indentation and it easily can go messy. - maybe `_asyncsyntaxerrorvisitor` can help any? but i guess it's for the other way aroundi'm sorry for the lack of dedication, i'd submit thw pr, but i hate writing tests and whatnot and also not sure of the better way to fix that. but i hope it's still useful for someone.",0,0.547,0,hatarist,Other
2018-11-21T00:00:00.000Z,0,"after creating a new conda virtual environment today, i met the same problem. the interface of the jupyter notebook has been automatically translated into my native language (chinese). maybe there is a configuration in somewhere, but i couldn't find it. (cry...)",0.266,0,0.438,libingallin,Other
2018-11-22T00:00:00.000Z,0,someone please fix and i will pay you $5,0,0,0,zsal,Other
2018-11-23T00:00:00.000Z,0,"i bumped into the same problem. the problem is, as @takluyver mentioned, that the default value for the sshkey value created in ""jupyter_client/consoleapp.py"" is`sshkey = unicode('', config=true,        help=""""""path to the ssh key to use for logging in to the ssh server."""""")`[here](https://github.com/jupyter/jupyter_client/blob/50ddc227e0baa9be5e4302621624545e59f4bfa6/jupyter_client/consoleapp.py#l126-l127)but paramiko only tests for none to see if no keyfile was specified.first i tried manually setting the sshkey value to none from the command line. `jupyter qtconsole --jupyterqtconsoleapp.sshkey=none --existing etc`which returned `[jupyterqtconsoleapp] critical | the 'sshkey' trait of a jupyterqtconsoleapp instance must be a unicode string, but a value of none <class 'nonetype'> was specified.`what finally worked, as a quick dirty workaround, was to change the value in the consoleapp.py file (line 122) to default to none. now things work, but it feels terrible.what is your opinion on further steps? should this be closed and an issue be opened at paramiko to include tests for emtpy strings? that's what i would do.",0,0,0,ronald-jaepel,Other
2018-11-24T00:00:00.000Z,0,"> i do it using ;\> > cv2.imshow('image', im) ;\> cv2.waitkey(0) ;\> cv2.destroyallwindows()it doesn't seem like you can mix python and magics this way:```in [5]: %run test.py ;\   ...: !echo foohi```",0.25,0,0,Evidlo,Other
2018-11-25T00:00:00.000Z,0,"in my case, the below solution worked. (downgrading tornado to 4.xx)https://github.com/jupyter/notebook/issues/3202#issuecomment-357199274",0,0,0,fgtom,Other
2018-11-29T00:00:00.000Z,0,i see this same issue with 7.1.1 and your workaround at least makes them readable. in my case they are orange on white if i don't workaround.,0,0,0,gbishop,Other
2018-11-30T00:00:00.000Z,0,"@zsal if you're serious, you could add this is issue on https://www.bountysource.com",0,0,0,sbliven,Other
2018-12-02T00:00:00.000Z,0.47,@fgtom downgrading tornado didn't work for me :/i occasionally run into this problem since a while... i already tried disabling windows defender and the firewall and different browsers without success. i installed the jupyter notebook using conda. i also tried reinstalling it globally and in conda environments without success either. :( this is really annoying...,0,0,0,stmax82,Other
2018-12-04T00:00:00.000Z,0,"for me this happens if i put `import matplotlib.pylab as plt` in the same cell as `plt.rcparams['figure.figsize'] = â€¦` but not if i put it in two cells.<img width=""498"" alt=""screen shot 2018-12-04 at 22 08 50"" src=""https://user-images.githubusercontent.com/612826/49473046-44f77280-f811-11e8-90ea-612184e27ab0.png""><img width=""511"" alt=""screen shot 2018-12-04 at 22 09 08"" src=""https://user-images.githubusercontent.com/612826/49473047-44f77280-f811-11e8-9216-15a79b67ef1d.png""> Â",0.734,0,0,mapio,Other
2018-12-05T00:00:00.000Z,0,i have this issue on anaconda with ipython 7.2.0. and scrapy shell (scrapy's version 1.5.1).,0,0,0,OSjerick,Other
2018-12-06T00:00:00.000Z,0,perhaps it is better to reset the `help` object during ipython initialization when `c.interactiveshell.display_page=true` is set. so that others will get the desired behavior automatically.,0,0,0,liushapku,Other
2018-12-08T00:00:00.000Z,0,would really like an answer to this as well.,0,0,0,tdpetrou,Other
2018-12-10T00:00:00.000Z,0,try `pip install tornado` or  `pip install --upgrade tornado`i've solved this on macos,0.734,0,0,victormm88,Other
2018-12-11T00:00:00.000Z,0,"> you can see it just **above** [this header](https://ipython.readthedocs.io/en/latest/development/ipython_directive.html#ipython-sphinx-directive-module), note that it only appears on the _documentation_ page, not in ipython shell itself:> > <img alt=""screen shot 2018-10-24 at 11 18 44 am"" width=""731"" src=""https://user-images.githubusercontent.com/335567/47452275-ad692380-d77e-11e8-9b08-1c119c52e9fa.png"">hey,the link  doesn't exist. can you please update it?",0,0,0,ankitkariryaa,Other
2018-12-12T00:00:00.000Z,0,same thing happened to me ...but when i disabled my adaware antivirus ..it worked...!!!!,0.406,0,0.672,RishabhVerma098,Other
2018-12-13T00:00:00.000Z,0,"applying the following patch:```patch--- pygments.py 2018-12-12 21:52:06.765154645 -0300+++ pygments_mod.py      2018-12-12 21:54:27.775161086 -0300@@ -45,7 +45,10 @@     pygments_style = []     for token, style in pygments_dict.items():-        pygments_style.append((pygments_token_to_classname(token), style))+        if isinstance(token, str):+            pygments_style.append((token, style))+        else:+            pygments_style.append((pygments_token_to_classname(token), style))     return style(pygments_style)```and using prompt tookit syles as per https://github.com/prompt-toolkit/python-prompt-toolkit/blob/master/prompt_toolkit/styles/defaults.py#l74 fixes it for me. i'm pretty sure there is a better way of doing this but i can create a pr if necessary. @jonathanslenders",0.5,0.288,0,petobens,Other
2018-12-17T00:00:00.000Z,0,i tried `ipython --no-autoindent` but it still indents!might be related to #11257,0,0,0,louisabraham,Other
2018-12-18T00:00:00.000Z,0,i had a similar error with autocompletion in `pandas`. updating to `jedi-0.13.2` helped:```pip3 install --upgrade jedi```,0,0,0,antontarasenko,Other
2018-12-20T00:00:00.000Z,0,"@takluyver i already spent several hours trying to find the cause, both at work and at home, but found that i lack experience with the code base / the architecture / how components are supposed to communicate. i'm sure if someone more experienced with the project could provide some hints on where to look / what to try everyone would be more than willing to work on a solution.",0,0,0,stmax82,Other
2018-12-22T00:00:00.000Z,0.344,"stumbled on this again today, even in strings that looks like console input are stripped:![image](https://user-images.githubusercontent.com/27316303/50379267-a9e20380-062c-11e9-8cad-88b0ecb1905e.png)because of my previous problem, i learned why, ipython applies the `promptstripper` which receives each cell splitted by lines right? if someone else stumble on this, here's the workaround i'm using:![image](https://user-images.githubusercontent.com/27316303/50379307-08f44800-062e-11e9-9adb-58c8c36943bd.png)that is, just remove it by running `get_ipython().input_transformers_cleanup.pop(1)`, 'input_transformers_cleanup' is just an array with the functions that will be run in each line of user input, i'm not sure if the promptstripper is always in index '1' tho, a bit more safe would be using:```pythonfrom ipython.core.inputtransformer2 import promptstripperfs = get_ipython().input_transformers_cleanupfs.remove(next(f for f in fs if isinstance(f, promptstripper)))```the elipsis case of my previous problem will work also  btw @takluyver now i think it's possible to keep the 'raw console paste' functionality and fix these cases, at least if there is a preprocess step done 'by cell' instead of 'by line' (which i guess there is right? how does autoawait work? wraps each line in functions?).just made a cell magic as poc, that simply uses `ast.parse` to check for syntax error before checking for leading '>>>' and '...' to strip, probably there are lighter ways to check it, like what is done in `doctest.doctestfinder` but i am still a total newbie in ipython and a bit in python in general so i can't reach a pr-worthy solution**edit**just noticed it actually works by cell already, so the poc is:```pythonimport astfrom ipython.core.inputtransformer2 import promptstripperprev = promptstripper.__call__def wrapper(self, lines):    try:        ast.parse(''.join(lines))        return lines    except syntaxerror:        return prev(self, lines)promptstripper.__call__ = wrapper```seems to work:![image](https://user-images.githubusercontent.com/27316303/50379631-d9493e00-0635-11e9-808a-95bdfdd97cd2.png)",0,0,0,betafcc,Other
2018-12-23T00:00:00.000Z,0,simply uninstall your adaware antivirus. it fixes the issue!,0,0,0,darshanc99,Other
2018-12-25T00:00:00.000Z,0,"@takluyver , thanks! though i don't think it's a matter of enough users. the rest of the notebook's ui is in english, so no reason of rtl layout regardless of personal habits.",0,0.469,0,shovalsa,Other
2018-12-26T00:00:00.000Z,0,"i have the same issue, ipython 7.2.0.",0,0,0,mimakaev,Other
2018-12-27T00:00:00.000Z,0,"for ipython version (7.1.0):`['', '/home/hsalamin/.virtualenvs/python3/bin', '/home/hsalamin/.virtualenvs/python3/lib/python35.zip', '/home/hsalamin/.virtualenvs/python3/lib/python3.5', '/home/hsalamin/.virtualenvs/python3/lib/python3.5/plat-x86_64-linux-gnu', '/home/hsalamin/.virtualenvs/python3/lib/python3.5/lib-dynload', '/usr/lib/python3.5', '/usr/lib/python3.5/plat-x86_64-linux-gnu', '/home/hsalamin/.virtualenvs/python3/lib/python3.5/site-packages', '/home/hsalamin/.virtualenvs/python3/lib/python3.5/site-packages/ipython/extensions', '/home/hsalamin/.ipython']`for ipython version 7.2.0 (inside iypthon):`['/home/hsalamin/.virtualenvs/python3/bin', '/home/hsalamin/.virtualenvs/python3/lib/python35.zip', '/home/hsalamin/.virtualenvs/python3/lib/python3.5', '/home/hsalamin/.virtualenvs/python3/lib/python3.5/plat-x86_64-linux-gnu', '/home/hsalamin/.virtualenvs/python3/lib/python3.5/lib-dynload', '/usr/lib/python3.5', '/usr/lib/python3.5/plat-x86_64-linux-gnu', '/home/hsalamin/.virtualenvs/python3/lib/python3.5/site-packages', '/home/hsalamin/.virtualenvs/python3/lib/python3.5/site-packages/ipython/extensions', '/home/hsalamin/.ipython']`for ipython 7.2.0 from the cmd line:`['/home/hsalamin/.virtualenvs/python3/bin', '/home/hsalamin/.virtualenvs/python3/lib/python35.zip', '/home/hsalamin/.virtualenvs/python3/lib/python3.5', '/home/hsalamin/.virtualenvs/python3/lib/python3.5/plat-x86_64-linux-gnu', '/home/hsalamin/.virtualenvs/python3/lib/python3.5/lib-dynload', '/usr/lib/python3.5', '/usr/lib/python3.5/plat-x86_64-linux-gnu', '', '/home/hsalamin/.virtualenvs/python3/lib/python3.5/site-packages', '/home/hsalamin/.virtualenvs/python3/lib/python3.5/site-packages/ipython/extensions', '/home/hsalamin/.ipython']`",0,0,0,hsalamin,Other
2018-12-28T00:00:00.000Z,0.359,"i did have a look at this and i think that output suppression is ""broken"" in general when multiline input is involved and not just in `ast_node_interactivity = 'all'`. i put ""broken"" in quotes because according to [this comment](https://github.com/ipython/ipython/issues/10794#issuecomment-328986083) output suppression only works for the **last** *top-level* expression. unfortunately, even though @carreau's comment is accurate, this is [not documented](https://github.com/ipython/ipython/blob/a2685d78f2403f84e6cb915ae11a4f6033ccc5f6/docs/source/interactive/tips.rst#suppress-output) so i am not sure it is considered a bug or not. issues #2493 and #6130 are probably related. until this is fixed, a fix to the docs would not be bad idea.## rationaleimho `ast_node_interactivity = ""all""` + output suppression is especially useful in multiline cells. e.g. you can check the value of a variable inside a loop without using a print() and then you just add a semicolon to suppress it (but hey, that's just me :) ).## breakdownthe relevant function for output suppression is [quiet()](https://github.com/ipython/ipython/blob/a8165da9102a62203c824f8cb59988e188fc6032/ipython/core/displayhook.py#l84-l103). to help debug this issue, i added a `print(token)` in the for loop (line 98). in the following output, i will omit the debug output when it is not relevant.disclaimer: the ""expected outputs"" of the following test cases showcase how **i** would expect this to work; you don't necessarily have to agree with this.### 1st test case``` pythona = 1b = 2a    # out1a;   # out2b    # out3```**expected output**:- `last_expr` -> `out3`- `all` -> `out1` & `out3`### 2nd test case``` pythona = 1b = 2a    # out1a    # out2b;   # out3```**expected output**:- `last_expr` -> `out2`- `all` -> `out2` & `out3`### `last_expr```` python[i] âžœ ipythonpython 3.7.1 (default, oct 22 2018, 10:41:28) type 'copyright', 'credits' or 'license' for more informationipython 7.2.0 -- an enhanced interactive python. type '?' for help.[ins] in [1]: from ipython.core.interactiveshell import interactiveshell                                                                                                                      [ins] in [2]: interactiveshell.ast_node_interactivity.default_valueout[2]: 'ast_node_interactivity = last_expr'```#### 1st test case``` python[ins] in [6]: a = 1          ...: b = 2          ...: a    # out1          ...: a;   # out2          ...: b    # out3                                                                                                                                                                     tokeninfo(type=0 (endmarker), string='', start=(6, 0), end=(6, 0), line='')tokeninfo(type=4 (newline), string='', start=(5, 11), end=(5, 12), line='')tokeninfo(type=55 (comment), string='# out3', start=(5, 5), end=(5, 11), line='b    # out3')tokeninfo(type=1 (name), string='b', start=(5, 0), end=(5, 1), line='b    # out3')out[6]: 2```the behaviour is correct, i.e. only `out3` is being shown.#### 2nd test case``` python[nav] in [7]: a = 1          ...: b = 2          ...: a    # out1          ...: a    # out2          ...: b;   # out3                                                                                                                                                                     tokeninfo(type=0 (endmarker), string='', start=(6, 0), end=(6, 0), line='')tokeninfo(type=4 (newline), string='', start=(5, 11), end=(5, 12), line='')tokeninfo(type=55 (comment), string='# out3', start=(5, 5), end=(5, 11), line='b;   # out3')tokeninfo(type=53 (op), string=';', start=(5, 1), end=(5, 2), line='b;   # out3')```in this case, the behaviour is wrong, i.e. we get no output instead of `out2`.### `ast_node_interactivity = all```` python[ins] in [10]: interactiveshell.ast_node_interactivity = ""all""                                                                                                                                ```#### 1st test case``` python[ins] in [11]: a = 1           ...: b = 2           ...: a    # out1           ...: a;   # out2           ...: b    # out3                                                                                                                                                                    tokeninfo(type=0 (endmarker), string='', start=(6, 0), end=(6, 0), line='')tokeninfo(type=4 (newline), string='', start=(5, 11), end=(5, 12), line='')tokeninfo(type=55 (comment), string='# out3', start=(5, 5), end=(5, 11), line='b    # out3')tokeninfo(type=1 (name), string='b', start=(5, 0), end=(5, 1), line='b    # out3')out[11]: 1tokeninfo(type=0 (endmarker), string='', start=(6, 0), end=(6, 0), line='')tokeninfo(type=4 (newline), string='', start=(5, 11), end=(5, 12), line='')tokeninfo(type=55 (comment), string='# out3', start=(5, 5), end=(5, 11), line='b    # out3')tokeninfo(type=1 (name), string='b', start=(5, 0), end=(5, 1), line='b    # out3')out[11]: 1tokeninfo(type=0 (endmarker), string='', start=(6, 0), end=(6, 0), line='')tokeninfo(type=4 (newline), string='', start=(5, 11), end=(5, 12), line='')tokeninfo(type=55 (comment), string='# out3', start=(5, 5), end=(5, 11), line='b    # out3')tokeninfo(type=1 (name), string='b', start=(5, 0), end=(5, 1), line='b    # out3')out[11]: 2```the behaviour is wrong, i.e. we should only get `out1` and `out3` but we get `out2` too.the interesting thing here is that the cell is (correctly) being tokenized 3 times, but each time the tokenization starts from the bottom of the cell (i.e. `b`). as a result, the output is not suppressed.#### 2nd test case``` python[ins] in [12]: a = 1           ...: b = 2           ...: a    # out1           ...: a    # out2           ...: b;   # out3                                                                                                                                                                    tokeninfo(type=0 (endmarker), string='', start=(6, 0), end=(6, 0), line='')tokeninfo(type=4 (newline), string='', start=(5, 11), end=(5, 12), line='')tokeninfo(type=55 (comment), string='# out3', start=(5, 5), end=(5, 11), line='b;   # out3')tokeninfo(type=53 (op), string=';', start=(5, 1), end=(5, 2), line='b;   # out3')tokeninfo(type=0 (endmarker), string='', start=(6, 0), end=(6, 0), line='')tokeninfo(type=4 (newline), string='', start=(5, 11), end=(5, 12), line='')tokeninfo(type=55 (comment), string='# out3', start=(5, 5), end=(5, 11), line='b;   # out3')tokeninfo(type=53 (op), string=';', start=(5, 1), end=(5, 2), line='b;   # out3')tokeninfo(type=0 (endmarker), string='', start=(6, 0), end=(6, 0), line='')tokeninfo(type=4 (newline), string='', start=(5, 11), end=(5, 12), line='')tokeninfo(type=55 (comment), string='# out3', start=(5, 5), end=(5, 11), line='b;   # out3')tokeninfo(type=53 (op), string=';', start=(5, 1), end=(5, 2), line='b;   # out3')```the behaviour is again wrong, i.e. instead of only suppressing `out3`, we get no output.in this case the cell is also being tokenized 3 times, but each time the tokenization starts from the bottom of the cell (i.e. `b`). as a result, the output `out1` and `out2` are suppressed, even thought they shouldn't.## conclusion(?) if i understand this correctly, the ""problem"" is that the tokenization of the cell always starts from the bottom node and not from the interactive node (not sure if the terms are correct). if someone provides some guidance on how to tackle this, i could have a look at this.",0,0,0,pmav99,Other
2018-12-29T00:00:00.000Z,0,"hi @carreau, just writing here to let you know that i'm back on this issue. school was insane for the last couple of months but now i'm back :)",0.656,0,0,LucianaMarques,Other
2019-01-03T00:00:00.000Z,0,"could this be re-opened? i am working on this again and i think the issue still exists when you have classes?sphinx seems to work fine with ipython 7.2 on [this](https://github.com/statsmodels/statsmodels/blob/master/docs/source/contrasts.rst) file, but only if i remove the class `simple` (and all the instances thereof). thus, i think there might be problem with classes. not sure how to provide a minimal example, sadly.",0,0.141,0.281,thequackdaddy,Other
2019-01-04T00:00:00.000Z,0,reopened.,0,0,0,Carreau,Member
2019-01-05T00:00:00.000Z,0,same issue here. arch linux with fontconfig 2.13.1,0,0,0,gitlio,Other
2019-01-06T00:00:00.000Z,0,"can you give an example so i can try to reproduce?   i can't reproduce, but i have to for matplotlib to use `agg` for it to run. what if you precede your code by ```import matplotlibmatplotlib.use('agg')```if that fixes the thing then it is likely a qt/wx eventloop thingy that add a singint handler.  happy to have you back, i have been away myself a bit, and i am just starting to get back on track.you probably need in `completer.py` to define a function that looks like:```def fwd_unicode_match(text:str) -> tuple[str, list]:    # `text` is what the user typed. if it start with `\`, then lookup in `names`  (defined above), all the possible candidates.   # return text, [list of candidates]```add the new function around [here](https://github.com/ipython/ipython/blob/c937798e7c001ee52efa6ac54541a51bff973f56/ipython/core/completer.py#l1987-l1991)with that you should be able to get something like this when pressing tab.<img width=""891"" alt=""screen shot 2019-01-06 at 09 42 58"" src=""https://user-images.githubusercontent.com/335567/50739583-7c05ce80-1197-11e9-9dc4-e9a617a4623f.png"">",0.25,0,0,Carreau,Member
2019-01-07T00:00:00.000Z,0,"for anyone that using @effrat solution and it doesn't work:make sure when you log in to your google account, don't sync the settings.syncing the settings will make jupyter going rtl again",0,0,0,LiranDan,Other
2019-01-08T00:00:00.000Z,0,"i also have a similar issue like @gbishop and it seems to be related with a recent change in `prompt-toolkit` that affects 256 color terminal scheme: prompt-toolkit/python-prompt-toolkit#766that said, ipython users currently have no means to override `completion-menu.completion.*` styles because any pygments tokens would be prefixed with `pygments.` string and that's not what the menu widgets would expect to work with. for example, `string_to_tokentype('completion-menu.completion.*')` would be internally converted to `pygments.completion-menu.completion.*` during `merge_styles()`.edit: just found #11526 discusses the same issue.  fyi, try setting `c.terminalinteractiveshell.true_color = true` in `ipython_config.py` if you have color issue especially when your terminal is something like `xterm-256color`. it worked for me.",0.198,0.258,0,tomyun,Other
2019-01-09T00:00:00.000Z,0,"@carreau yes, thank you! :)@tomaugspurger i would like to contribute to make this work, can we discuss it? thanks!  @tomaugspurger thank you for the explanation, i will take a loot at it and get back here.",0,0,0,LucianaMarques,Other
2019-01-10T00:00:00.000Z,0,"i can confirm that this is happening with the new docker and ipython started as cmd, but the same command if it is put in a sh script, the restart of the kernel is not happening.",0,0,0,juckuc,Other
2019-01-11T00:00:00.000Z,0,"can confirm the issue for ipython 7.2.0 on 2019-01-10:```python 3.7.1 (default, dec 14 2018, 19:28:38) type 'copyright', 'credits' or 'license' for more informationipython 7.2.0 -- an enhanced interactive python. type '?' for help.ipython profile: pysh ::  stand-by: looking into directory ~/.ipython/profile_pysh/startup ...#  [bunch of imports, including numpy and statsmodels] :.  eof stub  file ""cell_name"", line 7syntaxerror: from __future__ imports must occur at the beginning of the file                                                                                                                                                                ipy/nb  _i1 >>> print('test')                                                                                                                test```but notice: despite the `syntaxerror`, ipython seems to ignore it as a warning since the *prompt works thereafter.*my startup file does contain some magic, for example:```get_ipython().magic(u'logstart -o -t /dev/shm/55_ipsh_log.py backup')```after all imports are eliminated in the startup file, the issue still persists.read that the controller of all kernels has been rewritten in c++ and that this new development unfortunately cannot handle *magic* in jupyter cells. it is curious that the ipython error occurs with this mention: '**file ""cell_name""**, line 7' -- so how does one trace this type of filename? maybe related, maybe not, let us know. happy new year!",0,0,0,rsvp,Other
2019-01-12T00:00:00.000Z,0,"have the same with `@abstractmethod`..get the exception, but my code execution continues normally. ipython3: 6.3.1python3: 3.5.3debian: 9.6",0,0,0,fabrei,Other
2019-01-14T00:00:00.000Z,0,"how about at least creating a new instance for each rst file that is processed?  otherwise you could run into all kinds of non-deterministic behavior if you fiddle with any sort of global state and in one run, all the rst files are executed, and in another, only some of the rst are executed.  yes i know, global state is bad, but sometimes, unavoidable.",0,0,0.422,ibell,Other
2019-01-15T00:00:00.000Z,0,"is this issue still unresolved?   i think i may have caught this bug...this come up today for the first time (during a demo with a client when i was trying to demonstrate what a generator is in python!!!).  am i doing something wrong or what am i supposed to do to write multi-line code blocks (other than ctrl-o workaround)?expected result as demonstrated in the standard python repl:```(tsa) billsmacbookpro:develop billtubbs$ pythonpython 3.5.5 | packaged by conda-forge | (default, jul 23 2018, 23:45:11) [gcc 4.2.1 compatible apple llvm 6.1.0 (clang-602.0.53)] on darwintype ""help"", ""copyright"", ""credits"" or ""license"" for more information.>>> for i in range(5):...     x = i*2...     print(x)... 02468>>> exit()```result today when i type the same into an ipython repl:```(tsa) billsmacbookpro:develop billtubbs$ ipythonpython 3.5.5 | packaged by conda-forge | (default, jul 23 2018, 23:45:11) type 'copyright', 'credits' or 'license' for more informationipython 7.0.1 -- an enhanced interactive python. type '?' for help.in [1]: for i in range(5):    ...:     x = i*2                                                                   in [2]:      ```the ipython repl automatically indents the second line as expected.  but when i type enter at the end of the second line it executes the two lines instead of providing an optional third line.as described above, i can get the desired result by pressing ctrl-o instead of pressing enter on the second line:```in [2]: for i in range(5):    ...:     x = i*2    ...:     print(x)                                                                  02468```  oh sorry.  i thought i did.  after `conda update ipython` i get `# all requested packages already installed.`sorry, i'm a bit confused.  what is the latest version and how do i upgrade to it?",0.031,0,0,billtubbs,Other
2019-01-16T00:00:00.000Z,0,i am also experiencing broken tab completion in 7.2.0 for docstring defined signatures.,0.531,0.547,0,jlstevens,Other
2019-01-17T00:00:00.000Z,0,"if i read data from .json, like:```me = """"""[  {    ""id"": 43799,    ""name"": ""anatoly techtonik"",    ""username"": ""techtonik"",    ""state"": ""active"",    ""avatar_url"": ""https://secure.gravatar.com/avatar/9d7e611f31c52f4d62bbe279d4f334de?s=80&d=identicon"",    ""web_url"": ""https://gitlab.com/techtonik""  }]""""""```then i'd like to use http://jmespath.org/tutorial.html to access data inside with less boilerplate than `import json<enter>json.loadwhatever(me)[0][""id""]`. ```myid = me.json()[0].id```  `.j` can available as a property of https://ipython.readthedocs.io/en/stable/interactive/shell.html#string-lists if there is a way to turn string into string list easily.",0.167,0,0,techtonik,Other
2019-01-18T00:00:00.000Z,0.418,"@carreau is this related to the async stuff?  cc @carreau - the :horse: async horse is in python too now ;-)  does alt-enter work? as far as i know,  we can't detect ctrl-enter or shift-enter as different from enter in the terminal, so alt-enter is the shortcut to force execution.  oh, i'd missed that it was windows. i don't know what the windows console gives us.  i don't think this is something ipython should do. the focus is on the interface now, not on providing concise apis for particular operations.if you want a more convenient way to work with json, write a separate module for that. it could provide an [ipython extension](https://ipython.readthedocs.io/en/stable/config/extensions/index.html).  is it a big hardship to use the extra `--`? `.ipy` scripts aren't widely used, as far as we know, but they linger on in the codebase to bring up odd problems like this. i'm reluctant to add special cases for handling them.  do you want to make a pull request against entrypoints? https://github.com/takluyver/entrypoints  thanks. the necessary feature is in prompt_toolkit 2.0.7?",0.266,0,0,takluyver,Member
2019-01-19T00:00:00.000Z,0,"immediately after upgrading to `ipython 7.2.0` in venvthere was the same problem.```python 3.6.7 (default, oct 22 2018, 11:32:17) type 'copyright', 'credits' or 'license' for more informationipython 7.2.0 -- an enhanced interactive python. type '?' for help.in [1]: import microblog                                                                             ---------------------------------------------------------------------------modulenotfounderror                       traceback (most recent call last)<ipython-input-1-889f693766cd> in <module>----> 1 import microblogmodulenotfounderror: no module named 'microblog'```after restarting the computer, it remained.made `pip install --upgrade ipython``requirement already up-to-date: ipython``requirement already satisfied, skipping upgrade:` all the rest.`import` worksthe same thing happened when updating `ipython` on the system.add after 30min: it does not work again, i can not repeat it.add: repeats if you open a new terminal.`import sys; print(sys.path)`the working output version is different from the non-working `'',`if you add manually it starts working but then disappears again.and stops working.",0,0,0,fianitnz,Other
2019-01-21T00:00:00.000Z,0.234,"- providing the default python kernel for jupyter applications- offering a powerful interactive shell for python to run in the terminala bunch of other stuff got added to ipython in the past, which probably wouldn't be added today. some of this was general utilities from the days when python packaging was so awkward that people preferred to make big collections of useful pieces to avoid installing more than one package. those days are thankfully behind us - python packaging still isn't great, but it's good enough to distribute much more focused packages.another big chunk of functionality from the past is code to make ipython behave more like a shell. bits of this are useful, but a lot of it is ~unused and rusting, and the code to support it is convoluted and prone to corner cases. [xonsh](http://xonsh.org/) is a more modern codebase which provides similar features - as it was designed to do this from the beginning, it has a much cleaner approach than ipython can use.  if that was the only issue, we'd have had a lot more people trying to fix it before now.regardless of that issue, i wouldn't recommend anyone use .ipy scripts. in fact, i'd go so far as to say: *please* don't use .ipy scripts for new code, and if you have existing code in them, consider it technical debt which you should try to clear up. write python scripts, or shell scripts, or xonsh scripts instead.the ipython syntax is poorly specified; you're writing in a language with no proper grammar or parser. that means it's tricky for any static analysis tools to work with, which can be enormously useful even for dynamic languages like python. it also means it's entirely implementation-defined, and we can and do change the implementation significantly from one version to another. we try to preserve compatibility, but there are no guarantees, and i'm sure there are gaps in the test suite. if we found a way to preserve 90% of the functionality with 10% of the complexity,  we may well go for it, especially if that made it easier to do something else which was more interesting at the time. the ipython syntax is convenient for interactive use, but it's not something to rely on in a script.",0,0,0,takluyver,Member
2019-01-22T00:00:00.000Z,0,"i see that it affected a few tests, which fail since the traceback printout got affected.  i trust you will know whether the tests need to be adjusted or perhaps you have a different solution to avoid this very problematic leak.thanks.  yes, someone else has just mentioned to me that %debug is affected, since it relies on the locals() to be set. so more work needs to be done. i don't know anything about ipython's internals, but for its devs it should be an easy task to figure out.note that my patch was applied to a helper function `_get_exc_info()`, which is called in various places. it's possible that there is a better place to do `traceback.clear_frames(tb)`, that perhaps won't affect %debug. (i.e. in some specific location in the code, rather than in that helper function).it's possible that %debug magic needs to activate a flag that doesn't call `traceback.clear_frames(tb)` if needed, but by default it should be done. i hope it makes sense.> since the workaround is to raise another exception, it might make sense to just note that in the text for the outofmemory exception, or to only clear the frames when an oom exception is raised.and while in the user code we can make a special case for oom, it is definitely not an option on ipython level, since the leakage affects all exceptions!for example, jupyter notebook via ipython leaks memory on keyboard interrupt.  > thank you so much for investigating and fixing this one! are you able to update the tests too, to make them less strict about the output?:)first, help is needed to figure out how ipython can avoid this leak w/o affecting %debug magic",0.828,0,0,stas00,Other
2019-01-23T00:00:00.000Z,0,"joy, i had an idea it might be difficult / impossible, but you never know.   i'm not quite sure how to word the feature request there, is that a standard drop down in the prompt toolkit  ?",0,0,0.5,stuaxo,Other
2019-01-24T00:00:00.000Z,0.234,"no need for apologies. i also tried restarting my computer before asking ;)indeed, it seems like the kernelspec is created as you describe. correct meif i'm wrong, but that's not what the user might expect.the scenario in which we're working is that there's jupyter installed inthe 'system' (brewed) python and then virtualenvs are 'linked' to thatcentral system. this way the user needs to start one jupyter session only.that means though that ipykernel is also present in the'system-site-packages'.is it really needed to use heuristics here? sys.executable should normallybe all that's needed i'd guess?on thu, 24 jan 2019 at 01:32, matthias bussonnier <notifications@github.com>wrote:> apologies for the previous scarce reply, i had to run, and did not> completely read your issue.>> from the top of my head i'm unsure which ipykernel will take precedence> and what's the logic beyond what you see, it does appear weird indeed, but> my guess is that we are using heuristics to find which python executable to> run based on the site-packages location.>> so my wild guess is the ipykernel install think ""oh system site package> so i'm going to use system python"".>> i'm afraid thee logic of that might be in ipykernel , or even> jupyter_client, so i'll have to dig deep. @takluyver> <https://github.com/takluyver> and @mpacer <https://github.com/mpacer>> worked recently on kernelspec i believe so might know.>> â€”> you are receiving this because you authored the thread.> reply to this email directly, view it on github> <https://github.com/ipython/ipython/issues/11569#issuecomment-457020504>,> or mute the thread> <https://github.com/notifications/unsubscribe-auth/aah2ncbzr5svinucgkl5wmteq65j_q-hks5vgp8ogajpzm4akzeq>> .>  you're right, i've digged into the kernelspec.py and sys.executable it is!however, it seems that using --system-site-packages does influencesys.executable. not only in ipykernel, but in general. this is kind ofunexpected, but perhaps needed to get the imports right. interestingly thesys.base_path and sys.path remain unaffected...i looked for a reliable way of figuring out the 'effective' executable, butdidn't find one. maybe you have more experience with that?on thu, 24 jan 2019 at 12:22, thomas kluyver <notifications@github.com>wrote:> as far as i know it does use sys.executable. you can follow the relevant> code here:> https://github.com/ipython/ipykernel/blob/5.1.0/ipykernel/kernelspec.py>> things to check:>>    1. your shell can cache command locations, so if you run python3 ...,>    then activate a virtualenv, then run another python3 ... command, it>    may still be using the executable outside the env, even if which>    python3 shows something different. in bash, hash -r clears this cache>    so it searches path again the next time you use the command.>    2. iirc, the standard library venv module has a few differences from>    classic virtualenv. maybe when created with --system-site-packages,>    one of those differences means that sys.executable does point to the>    system python.>> â€”> you are receiving this because you authored the thread.> reply to this email directly, view it on github> <https://github.com/ipython/ipython/issues/11569#issuecomment-457162777>,> or mute the thread> <https://github.com/notifications/unsubscribe-auth/aah2nm5dexf-ruxksaehvbilgnn_tuojks5vgzecgajpzm4akzeq>> .>  in both cases bin/python3 is a symlink to /usr/local/opt/python/bin/python3.7 (as created by homebrew)running both executables produces different result:``` > ./ipykerneltest/bin/python3 -c ""import sys; print(sys.executable)""/usr/local/opt/python/bin/python3.7``````> ./ipykerneltestnosite/bin/python3 -c ""import sys; print(sys.executable)""/users/kuba.raczkowski/python/ipykerneltestnosite/bin/python3```where `ipykerneltestnosite` is the one _without_ `--system-site-packages`one would say it's ""magic""... :)",0.172,0,0,kubaraczkowski,Other
2019-01-25T00:00:00.000Z,0,"@carreau well the problem is that it actually crashes ipython itself. it's a pretty weird edge case i'll grant you that, i think there are a few options to fixing it (if desirable):1. mock `sys.setrecursionlimit()` so that it's not possible to set it low enough that it would crash the main ipython process - python itself does something like this: https://github.com/python/cpython/blob/ab67281e95de1a88c4379a75a547f19a8ba5ec30/python/sysmodule.c#l7772. see if it's possible to set the ""low water mark"" to a higher number in pure python without having to mock `sys.setrecursionlimit`.3. temporarily increase the recursion limit while calling ipython functions so that the repl itself doesn't actually consume any of the stack depththere may be structural changes to ipython that would obviate the problem, but i am not going to explore those because they're way out of proportion for fixing such a minor issue.possibly related is [bpo-25274](https://bugs.python.org/issue25274).",0,0.364,0.228,pganssle,Other
2019-01-27T00:00:00.000Z,0,"first of all, let's check the state of any cell is the ""code"" not in ""markdown""",0,0,0,MehrdadDS,Other
2019-01-29T00:00:00.000Z,0,"i strongly prefer a) or c).  the ability to (as @fperez described) retroactively get a debugging trace into an exception is invaluable, but only having one chance after the exception to get at it seems like a fair trade off to me. in terms of where ipython can ""leak"" memory `out` seems like it would be a bigger culprit....",0,0,0,tacaswell,Other
2019-01-30T00:00:00.000Z,0,there might be a need here to capture some code quality patterns (or ast pattern) out of this and put a warning signal into one of the [pycqa projects](https://github.com/pycqa) ?  thoughts @sigmavirus24 ?,0.297,0,0,thadguidry,Other
2019-01-31T00:00:00.000Z,0,downgrading to ipython==7.1.1 seemed to work as a fix for me.,0,0,0,jvanheugten,Other
2019-02-01T00:00:00.000Z,0,@albertz you may be interested in the following: https://blog.jupyter.org/a-new-python-kernel-for-jupyter-fcdf211e30a8,0,0,0,SylvainCorlay,Member
2019-02-02T00:00:00.000Z,0,"@albertz xeus and xeus-based kernels allow the user to override the concurrency model of the kernel, and use another one.this is mostly useful in a situation of e.g. a desktop app that would be running an event loop. you don't want to start another event loop for your kernel. instead, you probably want your python kernel to hook into the event loop of your application. this is how the slicerjupyter made use of xeus.",0,0,0,SylvainCorlay,Member
2019-02-03T00:00:00.000Z,0,"it would be useful to get clarity on what the expected behaviour is. my preference would be, especially with `ast_node_interactivity=""all""`, to suppress output from any line with a `;` in the multi-line block. one of the arguments i've also seen mentioned is that this also doesn't create a reference to it in the output history allowing the output to be garbage collected sooner.",0,0,0,achampion,Other
2019-02-04T00:00:00.000Z,0,"i think the behavior is ""best effort"", if we find a better implementation that we'll be happy to get it. the semi-colon  is mostly use to suppress the last output of cells, there is no particular expected behavior beyond this i believe.",0,0,0,Carreau,Member
2019-02-05T00:00:00.000Z,0,"yes, this is weird behavior. in my case the whole config is overwritten without @topherocity 's solution",0,0,0,Pithikos,Other
2019-02-06T00:00:00.000Z,0,"i also get this intermittently when importing decorators, only when using `%autoreload 2`:    importing  my_module.py    [autoreload of my_module failed: traceback (most recent call last):      file ""/home/user/anaconda3/lib/python3.7/site-packages/ipython/extensions/autoreload.py"", line 245, in check superreload(m, reload, self.old_objects)      file ""/home/user/anaconda3/lib/python3.7/site-packages/ipython/extensions/autoreload.py"", line 384, in superreload update_generic(old_obj, new_obj)  file ""/home/user/anaconda3/lib/python3.7/site-packages/ipython/extensions/autoreload.py"", line 323, in update_generic update(a, b)  file ""/home/user/anaconda3/lib/python3.7/site-packages/ipython/extensions/autoreload.py"", line 266, in update_function setattr(old, name, getattr(new, name))valueerror: wrapped_function() requires a code object with 1 free vars, not 0]`ipython 6.5.0python 3.7.0 64 bit xubuntu 18.04seems to happen when i change the return object for the wrapped function in the decorator function but can't see a consistent pattern.  code executes still, so it seems like it *is* importing.",0.198,0,0,opi9a,Other
2019-02-07T00:00:00.000Z,0,"check the terminal where you launch your notebook. try to deactivate your firewall(s). symantec/norton is known to block jupyter. this is likely more appropriate (and you might find more info) in jupyter/notebook.   no, it is indeed not currently possible. we would love to have this, but i lack the time / the project lack funding  to develop this more quickly.   yes, the ipython machinery is attempting to detect leading indent and remove them. this is to handle text that might be copy-pasted from other source (like the web) that may include leading indent. it will also automatically strip leading `>>>`, `...`, `... :` and `in [x]` prompt.",0,0,0,Carreau,Member
2019-02-10T00:00:00.000Z,0,i report the same issue!,0,0,0,abduallahmohamed,Other
2019-02-11T00:00:00.000Z,0.47,"i've just stumbled across this issue. even with```%config terminalinteractiveshell.cache_size = 0```jupyter notebook will not free objects referenced in cells. for instance, when writing```a + b```where (``a`` and ``b`` could be numpy arrays or tensors on a gpu), jupyter will hold on to ``a+b`` for the rest of the session even though the object should be freed right after printing/visualizing it.this is not a problem when working with small objects, but it does get rather annoying in interactive sessions that involve big data on a resource-constrained device (gpu memory..)",0,0,0,wjakob,Other
2019-02-12T00:00:00.000Z,0,"aww sintell, i was not able to apply the following label(s): `lib/backgroundjobs`,`bug`. either because they are not existing labels on this repository or because you do not have the permission to apply these.i tried my best to guess by looking at the casing, but was unable to find matching labels.",0,0,0,meeseeksdev[bot],Other
2019-02-13T00:00:00.000Z,0,> i updated ipython to `6.5.0` and i still have the issue with `scrapy shell`downgrading to ipython 6.5.0 fixed the problem will wait until this is fix in the latest,0,0,0,PepeCodes,Other
2019-02-16T00:00:00.000Z,0,"in my case i see that ipython 7.2.0 puts current working directory `''` in the middle of the list. thus standard libs are loaded before my own ones from current dir. it should not happen.```bash-5.0$ python -vpython 3.6.8bash-5.0$ python -c 'import sys,pprint; pprint.pprint(sys.path)'['', '/users/arubtsov/.pyenv/versions/3.6.8/lib/python36.zip', '/users/arubtsov/.pyenv/versions/3.6.8/lib/python3.6', '/users/arubtsov/.pyenv/versions/3.6.8/lib/python3.6/lib-dynload', '/users/arubtsov/.pyenv/versions/3.6.8/lib/python3.6/site-packages']bash-5.0$ ipython -c 'import sys,pprint; pprint.pprint(sys.path)'['/users/arubtsov/.pyenv/versions/3.6.8/bin', '/users/arubtsov/.pyenv/versions/3.6.8/lib/python36.zip', '/users/arubtsov/.pyenv/versions/3.6.8/lib/python3.6', '/users/arubtsov/.pyenv/versions/3.6.8/lib/python3.6/lib-dynload', '', '/users/arubtsov/.pyenv/versions/3.6.8/lib/python3.6/site-packages', '/users/arubtsov/.pyenv/versions/3.6.8/lib/python3.6/site-packages/ipython/extensions', '/users/arubtsov/.ipython']bash-5.0$ ipython -v7.2.0```i am on mac os mojave in case it matters.the same story with python 3.7.2actually, i have found the problem with _my problem_. posting here in case someone else is curious: https://github.com/ipython/ipython/commit/2c70fc6251a3bc5f3df7b956c89f9bc38ca2e2d6it seems like this was done intentionally. i cannot fully agree with the reasoning though",0.094,0,0,andrii-rubtsov,Other
2019-02-17T00:00:00.000Z,0,"could someone share if enabling `jedi` helped their workflow, and if it did, i would like to know how?it certainly made my life much harder: no multi-level completion, no folder completion, nor can i use autocompletion before running the cell (`df = pd.dataframe(); df.val<tab>` fails)",0,0,0,vityas,Other
2019-02-19T00:00:00.000Z,0,"the bug certainly has made my life much harder as well.auto-completion is probably one of the most important feature of an interactive shell. is there a way jedi and path auto-completion can coexist?some very simple heuristics in deciding to use jedi or the legacy completion will help a long way: if one is in a string, then it is unlikely one wants names from the current namespace.",0,0,0,rainwoodman,Other
2019-02-20T00:00:00.000Z,0,"@carreau could you assign this to me, please?",0,0,0,LucianaMarques,Other
2019-02-21T00:00:00.000Z,0,"> could you assign this to me, please?i don't think i can assign to people that do not have commit rights. just leaving a comment saying you want to work on it is enough.",0,0,0,Carreau,Member
2019-02-22T00:00:00.000Z,0,"@takluyver your comments here helped me through a similar problem with ipdb and understand that i can't use `set_trace()` directly in a jupyter cell. ipdb seems to be working fine for me with that understanding. however, i'm running into code display problems with the `%%debug` magic. if this is a separate problem i'll make a new issue for it, but it seems related. here's what i'm seeing:![image](https://user-images.githubusercontent.com/9361152/53250612-be706580-3688-11e9-960c-0e3328e88337.png)so i'm able to iterate over all the lines and print variable values just fine, but i can't see which line i'm on or show surrounding code lines with `l`. any idea what's going wrong here?thanks in advance!",0,0,0,benlindsay,Other
2019-02-23T00:00:00.000Z,0,"@lucianamarques can you retry ?   damn, i didn't try that. if your playing with 3.8 alpha, i'm going to assume you likely have enough skills to dig into this and find what the values of `source, filename, symbol` (and `self.flags`?) at that point. ipython do a number of source and ast transforms that are either incomplete or conflicting with 3.8. i'm not sure i'll have time to install 3.8 and try to track that down myself.   thanks all for pitching in, i'll try to release around friday feb 22. @akshayparopkari is not  too far from my office so we can see if i can get him to do the release. side note on this repo you should have the possibility to apply some tags to issues without having commit rights like so: @meeseeksdev tag ""help wanted""if you like more permissions, just ask and i can give you the ability to close issue, add any tags, remove any tags....<!--@meeseeksdev[bot] say ohweee happy to help--!>  by default permissions are a bit limited you can't tag everything, but now you (@lucianamarques) should be able to tag everything. see (https://github.com/ipython/ipython/blob/master/.meeseeksdev.yml) if there are things you can't do let me know and i'll edit .meeseeksdev.yml) to give you (anyone that asks) those permissions.",0,0,0,Carreau,Member
2019-02-25T00:00:00.000Z,0,"hi @ppmfloss, thanks for the feedback! i've tried with the version from the master branch (`7.4.0-dev`), and tested on several different python versions. the results are:- python 3.5.3: works fine.- python 3.6.0: works fine.- python 3.6.2: works fine.- python 3.6.3: the issue still exists.- python 3.6.4: the issue still exists.- python 3.7.0: works fine.so it appears this only affects certain versions of python. i did a search and my wild guess is that it could be related to python bugs, for instance <https://github.com/python/typing/issues/506>. not sure if you would plan to add workarounds to target python versions, but i guess the better solution for me is to upgrade my python installation.",0,0,0,huzecong,Other
2019-02-26T00:00:00.000Z,0,"i'm ok with the auto numbering but can i have a way to specify that this cell contains step 2 regardless.    > i'm ok with the auto numbering but can i have a way to specify that this cell contains step 2 regardless.actually, you can just enter 'step 1', 'step 2', 'step #' and then whatever other text underneath to achieve the same effect.",0,0,0,tinkerjs,Other
2019-02-27T00:00:00.000Z,0,"for those who have run into issues with downgrading, i found @ivirshup's comment to be most helpful - to disable `jedi` autocomplete in the ipython config. if you haven't already, you can generate an `ipython_config.py` with:```bash# generate configipython profile create# edit config file in vimvim .ipython/profile_default/ipython_kernel_config.py ```and change `c.ipcompleter.use_jedi = false` in `ipython_config.py`",0,0,0,michaelsilverstein,Other
2019-02-28T00:00:00.000Z,0,"ah no worries, patience is a virtue.",0,0,0,happyconcepts,Other
2019-03-01T00:00:00.000Z,0,"i can confirm, even a simpler example with a single temporarydirectory fails cleaning when stopping kernel or restarting it. the problem only arise when kernel is busy when stopped.by the way it is not only an atexit problem, as temporarydirectory rely only on weakref. all cleaning (using with, weakref.finalize, __del__ and atexit) consistently fail in the same manner.for example, despite using **with** this example doesn't clean if stopped during the sleep :```import timeimport tempfilewith tempfile.temporarydirectory() as tmp:        time.sleep(10)```",0.266,0,0.438,Pierre-Bartet,Other
2019-03-02T00:00:00.000Z,0,"@carreau could you take a look at this, please?",0,0,0,LucianaMarques,Other
2019-03-04T00:00:00.000Z,0,"get unexpected logging when press tab.```python 3.6.3 (default, oct  3 2017, 21:45:48) type 'copyright', 'credits' or 'license' for more informationipython 7.3.0 -- an enhanced interactive python. type '?' for help.``````in [3]: p = ais.pro2019-03-04 15:22:53,155 [debug] parso.python.diff: diff parser start2019-03-04 15:22:53,155 [debug] parso.python.diff: line_lengths old: 1; new: 12019-03-04 15:22:53,156 [debug] parso.python.diff: -> code[replace] old[1:1] new[1:1]2019-03-04 15:22:53,156 [debug] parso.python.diff: parse_part from 1 to 1 (to 0 in part parser)                                                                                                                    2019-03-04 15:22:53,156 [debug] parso.python.diff: diff parser end                   jects.pro2019-03-04 15:22:54,821 [debug] parso.python.diff: diff parser start2019-03-04 15:22:54,821 [debug] parso.python.diff: line_lengths old: 1; new: 12019-03-04 15:22:54,821 [debug] parso.python.diff: -> code[replace] old[1:1] new[1:1]2019-03-04 15:22:54,822 [debug] parso.python.diff: parse_part from 1 to 1 (to 0 in part parser)2019-03-04 15:22:54,822 [debug] parso.python.diff: diff parser end```[vgavro's answer](https://github.com/ipython/ipython/issues/10946#issuecomment-354501461) fixes this issue for me.",0.203,0,0,and-semakin,Other
2019-03-05T00:00:00.000Z,0,"i had the same problem on ubuntu.after installing the ipykernel inside the virtual environment, the python path was set to the standard python path (/usr/bin/python3). however, when i deactivated the virtual environment and reactivated it and installed another ipykernel in the virtual environment, the python path was set correctly to the path of the virtual environment.",0.266,0,0,alexgawrilow,Other
2019-03-06T00:00:00.000Z,0,"i have looked into this a little. from what i see, only classes and functions within a reloaded module are updated, but instances of these classes are not touched. updating these would be relatively straight forward setting`instance.__class__ = new_class`with `new_class` being the updated class reference.finding these instances is more complicated. the only way i can think of right now is passing `globals()` to the update function and iterate through all objects in the workspace (and recursively through all nested objects like lists, dicts etc.), checking whether`isinstance(obj, old_class)`and then doing the above update. although i believe this would be the most logical behavior for `%autoreload`, i am not sure of the performance costs.any other ideas?",0,0,0,daharn,Other
2019-03-07T00:00:00.000Z,0,"hi,i'm writing the comment here since the pr has been merged so i assume it will get more visibility on an open issue.it looks like #11318 is missing a `.tag(config=true)` on the `dict_keys_only` option, which prevents it from being set using:```%config ipcompleter.dict_keys_only = true```as a side note, having it `true` by default would be even better :-)regards,douglas",0,0,0,DouglasRaillard,Other
2019-03-08T00:00:00.000Z,0.5,did anyone succeed on that? i am getting crazy,0,0,0,arianccbasile,Other
2019-03-11T00:00:00.000Z,0,"thanks for your contribution, and congrats, i know it is a sometime scary step ! you did (almost) everything right; you'll just see people ask you to not send the pr from `master` of your fork, but use a feature-branch. though that's a detail and it does not matter for now. i'll try to come back to review this as soon as possible, though i'm quite busy this week, so i can't promise. from a quick read that looks great, i just need to understand it, and find out how to fix the tests. thanks !",0,0.415,0,Carreau,Member
2019-03-12T00:00:00.000Z,0,matplotlib also wants to fail ci if there are any errors in the docs.  which is to say i am :+1: on this change.,0,0,0,tacaswell,Other
2019-03-13T00:00:00.000Z,0,"likely. worst case i revert  #11528. though i'm stretched thin trying to maintain ipython on my free time. it's not my fulltime job anymore, so i can't commit as much time as before.",0,0,0,Carreau,Member
2019-03-15T00:00:00.000Z,0,> that worked for me:> > 1. removed hebrew (or arabic) from chrome languages (as mentioned before)> 2. deleted browser cached filesit is worked for me after clear chrome's browsing data and restart it.,0,0,0,czf1009,Other
2019-03-16T00:00:00.000Z,0,"after setting environ lang ,still not working ,then i just renamed the zh_cn folder in  i18n folder",0,0,0,funic,Other
2019-03-17T00:00:00.000Z,0,"i also encountered this problem on ipython with python 3.8.0a2. seems like there is an issue with built-in `compile()` function can't handle `namedexpr` in ast object used for representing assignment expression (a.k.a. walrus operator).```python 3.8.0a2+ (heads/master:06e1e68, mar 17 2019, 14:27:19)type 'copyright', 'credits' or 'license' for more informationipython 7.3.0 -- an enhanced interactive python. type '?' for help.in [1]: import astin [2]: compile(""if a == 1:\n  true"", '<string>', 'exec')out[2]: <code object <module> at 0x111075810, file ""<string>"", line 1>in [3]: compile(ast.parse(""if a == 1:\n  true""), '<string>', 'exec')out[3]: <code object <module> at 0x111075930, file ""<string>"", line 1>in [4]: compile(""if a := 1:\n  true"", '<string>', 'exec')out[4]: <code object <module> at 0x1110759c0, file ""<string>"", line 1>in [5]: compile(ast.parse(""if a := 1:\n  true""), '<string>', 'exec')---------------------------------------------------------------------------systemerror                               traceback (most recent call last)<ipython-input-5-d255a1eb1b58> in <module>----> 1 compile(ast.parse(""if a := 1:\n  true""), '<string>', 'exec')systemerror: unexpected expression```  reported upstream: https://bugs.python.org/issue36332",0.203,0,0,tomyun,Other
2019-03-18T00:00:00.000Z,0,successful work-around in anaconda environment:`conda install ipython=7.2.0`,0,0,0,texadactyl,Other
2019-03-19T00:00:00.000Z,0.359,"> [the jedi completer] certainly made my life much harder: no multi-level completion, no folder completion, [â€¦]nonono. itâ€™s not the jedi completer that does that. thereâ€™s multiple completers and youâ€™re describing that the wrong completer is selected because the completer selection code is broken. and touching the list of completers by enabling jedi uncovered that bug. @takluyver describes the problem in https://github.com/ipython/ipython/pull/10996#issuecomment-378288569.disabling jedi again is a temporary workaround, but actually fixing the completer selection code (#11064 i think) would of course be a much better solution.",0,0.438,0,flying-sheep,Other
2019-03-20T00:00:00.000Z,0,"i'm not quite sure what you are requesting. most of the terminal handling is not done by ipython itself, so i doubt this is something that ipython can fix or implement.   i'm not quite sure what you are requesting. most of the terminal handling is not done by ipython itself, so i doubt this is something that ipython can fix or implement.",0,0,0,Carreau,Member
2019-03-21T00:00:00.000Z,0,![party parrot](http://cultofthepartyparrot.com/parrots/hd/parrot.gif)![party parrot](http://cultofthepartyparrot.com/parrots/hd/parrot.gif)![party parrot](http://cultofthepartyparrot.com/parrots/hd/parrot.gif)![party parrot](http://cultofthepartyparrot.com/parrots/hd/parrot.gif)![party parrot](http://cultofthepartyparrot.com/parrots/hd/parrot.gif)![party parrot](http://cultofthepartyparrot.com/parrots/hd/parrot.gif)![party parrot](http://cultofthepartyparrot.com/parrots/hd/parrot.gif)![party parrot](http://cultofthepartyparrot.com/parrots/hd/parrot.gif)![party parrot](http://cultofthepartyparrot.com/parrots/hd/parrot.gif)![party parrot](http://cultofthepartyparrot.com/parrots/hd/parrot.gif)  ![party parrot](http://cultofthepartyparrot.com/parrots/hd/parrot.gif)![party parrot](http://cultofthepartyparrot.com/parrots/hd/parrot.gif)![party parrot](http://cultofthepartyparrot.com/parrots/hd/parrot.gif)![party parrot](http://cultofthepartyparrot.com/parrots/hd/parrot.gif)![party parrot](http://cultofthepartyparrot.com/parrots/hd/parrot.gif)![party parrot](http://cultofthepartyparrot.com/parrots/hd/parrot.gif)![party parrot](http://cultofthepartyparrot.com/parrots/hd/parrot.gif)![party parrot](http://cultofthepartyparrot.com/parrots/hd/parrot.gif)![party parrot](http://cultofthepartyparrot.com/parrots/hd/parrot.gif)![party parrot](http://cultofthepartyparrot.com/parrots/hd/parrot.gif),0,0,0,meeseeksdev[bot],Other
2019-03-22T00:00:00.000Z,0,"> this probably should be reported to conda not ipython.i see an exception in notebook, so as a common user i start with reporting it here.> how did you install ipython ?via conda```- ipykernel=4.10.0=py27_0- ipython=5.8.0=py27_0- ipython_genutils=0.2.0=py27h8b9a179_0- ipywidgets=7.4.2=py27_0```> side note, if you can i would strongly suggest upgrading to python 3; most libraries have now dropped python 2 support and you'll likely get less and less support.i would love to, but a custom package i am using does not support python 3.  > this probably should be reported to conda not ipython.i see an exception in notebook, so as a common user i start with reporting it here.> how did you install ipython ?via conda```- ipykernel=4.10.0=py27_0- ipython=5.8.0=py27_0- ipython_genutils=0.2.0=py27h8b9a179_0- ipywidgets=7.4.2=py27_0```> side note, if you can i would strongly suggest upgrading to python 3; most libraries have now dropped python 2 support and you'll likely get less and less support.i would love to, but a custom package i am using does not support python 3.",0,0,0,ikizhvatov,Other
2019-03-23T00:00:00.000Z,0,"> same here, is there any known workaround that does not require running stuff 2 times?yes: you just need to put the assignement in a different cell, as in https://github.com/ipython/ipython/issues/11098#issuecomment-444259169 i know it's not optimal, but at least you don't have to re-execute the cell.",0,0,0,mapio,Other
2019-03-25T00:00:00.000Z,0.359,"the offending code is this function. it is called whenever there is an `await` statement at the top level.https://github.com/ipython/ipython/blob/f0f6cd8b8c9f74ea8b2c5e37b6132212ce661c28/ipython/core/async_helpers.py#l77-l91it wraps a block in an async function and naively indents it by eight. i'm not super familiar with ast parsing (especially using the builtin `ast` module), but there isn't (or at the very least i don't see) a way to check if a given string is a triple-quote string via the `ast` module.it'd be a shame if this were just silently broken. at the very least, we could warn if we detect the use of triple-quotes together with await (even a simple heuristic along the lines of `if '""""""' in code: ...`, as well as only warning once to avoid spamming the user).  (tag @carreau since they seem to be the one most involved with asyncio in the repl)  great! if there's anything i (or anyone else) can do, feel free to suggest next steps.  the offending code is this function. it is called whenever there is an `await` statement at the top level.https://github.com/ipython/ipython/blob/f0f6cd8b8c9f74ea8b2c5e37b6132212ce661c28/ipython/core/async_helpers.py#l77-l91it wraps a block in an async function and naively indents it by eight. i'm not super familiar with ast parsing (especially using the builtin `ast` module), but there isn't (or at the very least i don't see) a way to check if a given string is a triple-quote string via the `ast` module.it'd be a shame if this were just silently broken. at the very least, we could warn if we detect the use of triple-quotes together with await (even a simple heuristic along the lines of `if '""""""' in code: ...`, as well as only warning once to avoid spamming the user).  (tag @carreau since they seem to be the one most involved with asyncio in the repl)  great! if there's anything i (or anyone else) can do, feel free to suggest next steps.",0,0.141,0,travigd,Other
2019-03-26T00:00:00.000Z,0,"its is probably only on the 5.x branch: https://github.com/ipython/ipython/blob/5.x/docs/source/whatsnew/version5.rst> ipython 5.8.0> update inspecting function/methods for future-proofing. #11139 i'll update on master.   you are right that this is due to #11542 , i'll see if i can come up with a fix.   its is probably only on the 5.x branch: https://github.com/ipython/ipython/blob/5.x/docs/source/whatsnew/version5.rst> ipython 5.8.0> update inspecting function/methods for future-proofing. #11139 i'll update on master.   you are right that this is due to #11542 , i'll see if i can come up with a fix.",0,0,0,Carreau,Member
2019-03-27T00:00:00.000Z,0,"just look at the use case in the image: why would i want to type a python object name inside of a string literal?   is it because jedi doesn't think it is an errorleaf, or is it because going back by two nodes is insufficient?  tokenize has its problem too. what if the cell raises an indentationerror or syntaxerror before the string opening?you may need to backtrack lines gradually, but then you are always expecting an error near the cursor due to the incomplete string declaration?",0,0,0,rainwoodman,Other
2019-03-28T00:00:00.000Z,0,"with tokenize i'm thinking of a simple logic like it is done in [`inputtransformer2.py`](https://github.com/ipython/ipython/blob/a37e39f79a6a30eb4c461783db74913590da80df/ipython/core/inputtransformer2.py#l478). there is some logic for knowing if the user is typing a list or a dictionary in the terminal, so that when pressing `enter` you do not execute the code, you put a new line:![test1](https://user-images.githubusercontent.com/21197331/55141165-13951080-513a-11e9-906a-51abd2176e49.png)![test2](https://user-images.githubusercontent.com/21197331/55141166-13951080-513a-11e9-8f25-601e757e1f87.png)maybe we can try something equivalent with the `""` and `'` characters (i can try to come up with a pr).also another idea could be to use regexp, i would be useless in this case though :p  > tokenize has its problem too. what if the cell raises an indentationerror or syntaxerror before the string openingi guess it would just not complete... what is the current behavior? does the autocompletion still work when you have a syntaxerror in your code? we should check",0,0,0,martinRenou,Other
2019-03-29T00:00:00.000Z,0.351,"> i think we can leave that here. this jus to help to know which completions come from jedi (a autocompletion library) and which ones commes from ipython.ok. i thinks it's still a little bit confusing, i will think more about it and try to bring up a solution.> here you can see that `import` is generated from jedi, and `importlib` from ipython.> we can remove this, it is not that helpfull anymore.sure! > if i understand correctly, yes, remove `text=...` from the `_complete` function seem the right thing to do.sure, will do it!> if you believe this file need to be slit up, then please go for it, you do not need to request permission.thanks, i will try to do it and will probably help with some documentation enhancements too. i'm just afraid to modify too many stuff and break code. > also we talked about applying to outreachy this winter last week, and well try to do so. i would also introduce you to @leportella who was our intern last winter. she might have insightfull comments.thanks for the contact! i will try to reach her.",0,0,0,LucianaMarques,Other
2019-03-31T00:00:00.000Z,0,> pressing ctrl+o works for me (tried in cmd and conemu consoles).for me it's `alt+o`.,0,0,0,Evidlo,Other
2019-04-01T00:00:00.000Z,0,"`%%time` is used a lot, this affects many users & notebooks.@carreau or anyone - is it possible to do a patch release for this soon?(for now i'll go back to v7.3 and tell others to do the same)  `%%time` is used a lot, this affects many users & notebooks.@carreau or anyone - is it possible to do a patch release for this soon?(for now i'll go back to v7.3 and tell others to do the same)",0,0,0,cdeil,Other
2019-04-02T00:00:00.000Z,0,"well i'll fix it once ai have time. the thing is my $dayjob is not fulltime open source anymore so ipython has effectively less than 20% of amaintainer. and i prefer to use this time to review people code and befriendly in a hope to get more people to help.on tue, apr 2, 2019, 14:45 david w.h. swenson <notifications@github.com>wrote:> @wanick <https://github.com/wanick> : i believe the %%timeit behavior was> the same before 7.4.0 (and made sense to me: timeit does multiple runs --> which one should be the result?) of course, there's no such ambiguity with> %%time.>> â€”> you are receiving this because you were mentioned.> reply to this email directly, view it on github> <https://github.com/ipython/ipython/issues/11659#issuecomment-479217282>,> or mute the thread> <https://github.com/notifications/unsubscribe-auth/aauez_ruq7rt-3imrmp1ukbmfkmcyfo7ks5vc89bgajpzm4cd5yv>> .>  well i'll fix it once ai have time. the thing is my $dayjob is not fulltime open source anymore so ipython has effectively less than 20% of amaintainer. and i prefer to use this time to review people code and befriendly in a hope to get more people to help.on tue, apr 2, 2019, 14:45 david w.h. swenson <notifications@github.com>wrote:> @wanick <https://github.com/wanick> : i believe the %%timeit behavior was> the same before 7.4.0 (and made sense to me: timeit does multiple runs --> which one should be the result?) of course, there's no such ambiguity with> %%time.>> â€”> you are receiving this because you were mentioned.> reply to this email directly, view it on github> <https://github.com/ipython/ipython/issues/11659#issuecomment-479217282>,> or mute the thread> <https://github.com/notifications/unsubscribe-auth/aauez_ruq7rt-3imrmp1ukbmfkmcyfo7ks5vc89bgajpzm4cd5yv>> .>",0,0,0,Carreau,Member
2019-04-03T00:00:00.000Z,0,"to give an idea what adding this makes possible in terms of dashboarding (plotting with holoviews, bokeh backend):![holoviews-interactive-audio_mouse](https://user-images.githubusercontent.com/8008618/55468228-e4046d80-563d-11e9-855f-3793d3eca8a8.png)- the green line represents where the audio currently is, which is updated through a callback in javascript when 'currenttime' changes, which updates a python variable.- the blue line follows the cursor- when clicked, javascript code is executed to set the audio widget's 'currenttime' based on the x-value of the cursor.  to give an idea what adding this makes possible in terms of dashboarding (plotting with holoviews, bokeh backend):![holoviews-interactive-audio_mouse](https://user-images.githubusercontent.com/8008618/55468228-e4046d80-563d-11e9-855f-3793d3eca8a8.png)- the green line represents where the audio currently is, which is updated through a callback in javascript when 'currenttime' changes, which updates a python variable.- the blue line follows the cursor- when clicked, javascript code is executed to set the audio widget's 'currenttime' based on the x-value of the cursor.",0,0,0.4,NumesSanguis,Other
2019-04-04T00:00:00.000Z,0,"still have this issue with iptyhon 7.4.0 and scrapy shell```import logginglogging.getlogger().setlevel(logging.warning);```works, but i cant make it work during starting of the shell. looks like scapy don't loads default_profileany workarounds?",0.172,0,0,docker77,Other
2019-04-05T00:00:00.000Z,0,"> sure! i would be happy to collaborate and contribute a bit to the ipython completion logic, i feel like it deserves a bit more love at some places :)yup, me too.> i wanted to try and fix [this other issue](https://github.com/ipython/ipython/issues/11530), if you want to take a look at it. it seems like people are interested in having **only** path completion when typing in a string, and that [this part of the code](https://github.com/ipython/ipython/blob/65778adec13a65f82c5d2bab123e7a63516702c8/ipython/core/completer.py#l1371-l1377) is supposed to achieve this but does not work.seems interesting, this should be something we could work on. i'll write you an e-mail and we can schedule a call!  > sure! i would be happy to collaborate and contribute a bit to the ipython completion logic, i feel like it deserves a bit more love at some places :)yup, me too.> i wanted to try and fix [this other issue](https://github.com/ipython/ipython/issues/11530), if you want to take a look at it. it seems like people are interested in having **only** path completion when typing in a string, and that [this part of the code](https://github.com/ipython/ipython/blob/65778adec13a65f82c5d2bab123e7a63516702c8/ipython/core/completer.py#l1371-l1377) is supposed to achieve this but does not work.seems interesting, this should be something we could work on. i'll write you an e-mail and we can schedule a call!",0,0,0,LucianaMarques,Other
2019-04-06T00:00:00.000Z,0,"the upstream issue was fixed and the fix is available with python 3.8 alpha 3. verified the same on master. i think this can be closed.```shell(foo-venv) â‹Š> ~/cpython on master â¨¯ ipython                                                  18:59:03python 3.8.0a3+ (heads/master:2ea8099523, apr  6 2019, 18:56:04)type 'copyright', 'credits' or 'license' for more informationipython 7.4.0 -- an enhanced interactive python. type '?' for help.in [1]: items = [{'name': 'foo'}, {}]in [2]: for item in items:   ...:     if name := item.get('name'):   ...:         print(name)   ...:foo```",0.172,0,0,tirkarthi,Other
2019-04-07T00:00:00.000Z,0.453,"i like this change, but could you make it clearer in the help docs that `quiet` means to suppress the history lines specifically? a user will still see any output from the command, right? ""quiet"" usually implies that all regular output will be suppressed (i.e. non-errors) or maybe just lower verbosity.  nice work on the tests!  i like this change, but could you make it clearer in the help docs that `quiet` means to suppress the history lines specifically? a user will still see any output from the command, right? ""quiet"" usually implies that all regular output will be suppressed (i.e. non-errors) or maybe just lower verbosity.  nice work on the tests!",0,0.188,0,havocbane,Other
2019-04-08T00:00:00.000Z,0,still an issue in ipython-7.4.0,0,0,0,texadactyl,Other
2019-04-10T00:00:00.000Z,0,"you likely want to deactivate the history which is using sqlite. i'm not quite sure i rememeber the config for this. ```$ python --versionpython 2.7.5$ ipython --version6.2.1```that is unlikely; ipython 6 will not work on python 2. make sure your ipython are using the correct python, that might help you to solve things. to be sure you can use `python -m ipython` to be certain.   we're planning to fix it as soon as we have time; it will likely make it to the 7.5 release that i'll try to make before end of month.   you likely want to deactivate the history which is using sqlite. i'm not quite sure i rememeber the config for this. ```$ python --versionpython 2.7.5$ ipython --version6.2.1```that is unlikely; ipython 6 will not work on python 2. make sure your ipython are using the correct python, that might help you to solve things. to be sure you can use `python -m ipython` to be certain.   we're planning to fix it as soon as we have time; it will likely make it to the 7.5 release that i'll try to make before end of month.",0,0,0,Carreau,Member
2019-04-11T00:00:00.000Z,0,"thanks for the comment.i found the `python3` command and ipython will be run with python3. unfortunately, the problem is still there.```$ pyenv global system$ python --versionpython 2.7.5$ python3 --versionpython 3.6.3$ python -m ipython/bin/python: no module named ipython$ python3 -m ipython(no response)```",0,0.258,0,keisuke-yanagisawa,Other
2019-04-13T00:00:00.000Z,0,"actually, it was fixed by the above, but since regressed. the fix was lost in a refactor (it's hard to add tests that require misbehaving terminals). another attempt here: https://github.com/prompt-toolkit/python-prompt-toolkit/pull/877",0,0,0,davidszotten,Other
2019-04-14T00:00:00.000Z,0,"i tried `ipython --quick`, however, it got stuck with same status.",0,0,0,keisuke-yanagisawa,Other
2019-04-15T00:00:00.000Z,0,fix has landed in [prompt-toolkit](https://github.com/prompt-toolkit/python-prompt-toolkit/pull/877) but isn't yet in a released version,0,0,0,davidszotten,Other
2019-04-16T00:00:00.000Z,0,"bump, the [suggested workaround](https://github.com/nsls-ii/ophyd/issues/683#issuecomment-469388963) for now is    ipython --ipcompleter.use_jedi=falsea proper fix would be nicer",0,0,0,prjemian,Other
2019-04-17T00:00:00.000Z,0,"in the meantime you can just use the `xmode` magic, but yes we woudl need to hook things correctly to propagate the config change.   do you mean when running live, or are you running things in nbconvert. i see why this would make sens. i woudl have a look at ipython.core.displayhook in compute_format_data, you will likely be able to intercept a dictionary of mimetype/values and if you look at the plain/text key (and likely the html one for pandas) you should be able to do a search/replace. if that's the right place it should be relatively easy to add a list callable/filter from the configuration.   in the meantime you can just use the `xmode` magic, but yes we woudl need to hook things correctly to propagate the config change.   do you mean when running live, or are you running things in nbconvert. i see why this would make sens. i woudl have a look at ipython.core.displayhook in compute_format_data, you will likely be able to intercept a dictionary of mimetype/values and if you look at the plain/text key (and likely the html one for pandas) you should be able to do a search/replace. if that's the right place it should be relatively easy to add a list callable/filter from the configuration.   ho, that's a fun one. we'll see what we can do.   many thanks ! i'll review that as soon as i can. i'm not super familiar with the directive code, and having this code get some love is good !  that seem reasonable. let me wrap my head around that as i haven't used psearch in a while. but otherwise that seem reasonable.",0,0,0,Carreau,Member
2019-04-18T00:00:00.000Z,0,"i am also having the same issue. it works locally, but not on sphinx or azure pipelines...see the build failure:https://dev.azure.com/pymedphys/pymedphys/_build/results?buildid=1290",0,0,0,SimonBiggs,Other
2019-04-19T00:00:00.000Z,0,i'm still planning to have a look. apologies for the delay,0,0,0,Carreau,Member
2019-04-20T00:00:00.000Z,0,"no worries, we are all doing this in our spare time i guess.",0,0,0,daharn,Other
2019-04-22T00:00:00.000Z,0,"i fully agree that this should happen in a more intelligent manner. for instance, if one is hitting shift-tab in something like `mydict[|]` (where `|` is where the cursor is), it would be great if it could list the dictionary keys first.personally i feel that the private variables (`_something` and `__something`) should only be visible if a single underscore has already been entered. i would love to help, but i'm not sure if i should be looking to [jedi](https://github.com/davidhalter/jedi) or the [ipython completer code](https://github.com/ipython/ipython/blob/master/ipython/core/completer.py).",0,0.828,0,thomasaarholt,Other
2019-04-23T00:00:00.000Z,0,"i don't know the internal parts of ipython, nor know if it's even possible to integrate autoawait with `run`, but even just a nicer error message would be so helpful. for example something which instructs the user that ""to run script files with await, please use the %load filename syntax"".   thanks for the clarifications! i think as a workaround a nice hint message for run would be really nice. i think most use-cases can be simplified / reproduced in a %load compatible way, so at least people should know that it's supported in ipython and they just need to run it with %load.my problem was that the lack of hint message plus the confusing sentence in the documentation made me abandon the whole idea, whereas i was only one command away from the solution.  i don't know the internal parts of ipython, nor know if it's even possible to integrate autoawait with `run`, but even just a nicer error message would be so helpful. for example something which instructs the user that ""to run script files with await, please use the %load filename syntax"".   thanks for the clarifications! i think as a workaround a nice hint message for run would be really nice. i think most use-cases can be simplified / reproduced in a %load compatible way, so at least people should know that it's supported in ipython and they just need to run it with %load.my problem was that the lack of hint message plus the confusing sentence in the documentation made me abandon the whole idea, whereas i was only one command away from the solution.",0,0.422,0,hyperknot,Other
2019-04-24T00:00:00.000Z,0.47,"this bug is really annoying. none of the solutions mentioned so far in this post works, when it's a decorated method rather than a decorated function. perhaps i just rely too much on ``autoreload`` in my work flow. hope this get's fixed soon, or i am open to alternatives similar to this, by which i can use both jupyter and ide at the same time.",0,0.586,0,WestXu,Other
2019-04-25T00:00:00.000Z,0,"@zzzz-qq very cool, thanks! could you please document the profiling process you did here?",0,0,0,LucianaMarques,Other
2019-04-26T00:00:00.000Z,0,"can confirm. ran into this bug using pytorch's `no_grad` decorator. i am using ubuntu 18,04, python 3 on miniconda.",0,0,0,sanyam5,Other
2019-04-27T00:00:00.000Z,0.333,> there was a process named conda.exe in task manager. i killed that process and i was successfully able to interrupt the kernel@ahmedrao how????,0,0,0,kak-to-tak,Other
2019-04-28T00:00:00.000Z,0,"hey, just for documenting what i'm doing, i found another todo in around line 2024:```        # fixme: we should extend our api to return a dict with completions for        # different types of objects.  the rlcomplete() method could then        # simply collapse the dict into a list for readline, but we'd have        # richer completion semantics in other environments.```this is also in the _complete() constructor.",0,0,0,LucianaMarques,Other
2019-05-01T00:00:00.000Z,0,"any update on this?i am having the same problem, in windows ctrl+enter does not run all the ipython code in a cell anymore, now i have to go to the last line and press enter a couple times to execute itis there any way to fix this / change this behavior?",0,0,0,decordoba,Other
2019-05-02T00:00:00.000Z,0,"hey guys, i'm sorry for the delay in replying to this, but i didn't run any tests before submitting this pr. i'll do this and i'll come back later with some improvements.  hey guys, i'm sorry for the delay in replying to this, but i didn't run any tests before submitting this pr. i'll do this and i'll come back later with some improvements.",0,0,0.373,LucianaMarques,Other
2019-05-03T00:00:00.000Z,0,"running ipython with pythonioencoding=utf-8 solves the issue.```~$ pythonioencoding=utf-8 ipython3 python 3.6.7 | packaged by conda-forge | (default, feb 20 2019, 02:51:38)                         type 'copyright', 'credits' or 'license' for more information                                     ipython 7.4.0 -- an enhanced interactive python. type '?' for help.                                                                                                                                 in [1]: '\u00e9'                                                                                  out[1]: '�'                                                                                                                                                                                         in [2]: 'é'                                                                                      out[2]: 'é'                                                                                      in [3]: import sys; sys.stdout.encodingout[3]: 'utf-8'```  cpython displays an encoded character when it isn't supported, that sounds like the way to go.```>>> '\u00e9''\xe9'>>> print('\u00e9')traceback (most recent call last):  file ""<stdin>"", line 1, in <module>unicodeencodeerror: 'ascii' codec can't encode character '\xe9' in position 0: ordinal not in range(128)>>> import sys; sys.stdout.encoding                                                               'ansi_x3.4-1968'```it still gives an error when using print, but that's another issue.  running ipython with pythonioencoding=utf-8 solves the issue.```~$ pythonioencoding=utf-8 ipython3 python 3.6.7 | packaged by conda-forge | (default, feb 20 2019, 02:51:38)                         type 'copyright', 'credits' or 'license' for more information                                     ipython 7.4.0 -- an enhanced interactive python. type '?' for help.                                                                                                                                 in [1]: '\u00e9'                                                                                  out[1]: '�'                                                                                                                                                                                         in [2]: 'é'                                                                                      out[2]: 'é'                                                                                      in [3]: import sys; sys.stdout.encodingout[3]: 'utf-8'```  cpython displays an encoded character when it isn't supported, that sounds like the way to go.```>>> '\u00e9''\xe9'>>> print('\u00e9')traceback (most recent call last):  file ""<stdin>"", line 1, in <module>unicodeencodeerror: 'ascii' codec can't encode character '\xe9' in position 0: ordinal not in range(128)>>> import sys; sys.stdout.encoding                                                               'ansi_x3.4-1968'```it still gives an error when using print, but that's another issue.",0,0.258,0,pierstitus,Other
2019-05-04T00:00:00.000Z,0,"i believe this is on purpose, `%timeit` may run the code several time; and does some modifications to the actual statement you run; so returning the value of the ""last"" statement might not be what you expect.   i believe this is on purpose, `%timeit` may run the code several time; and does some modifications to the actual statement you run; so returning the value of the ""last"" statement might not be what you expect.",0,0,0,Carreau,Member
2019-05-05T00:00:00.000Z,0,"this is still an issue, isn't it? shalll i submit a pr?  i'll use (2) from @pganssle's suggestions.",0,0,0,Madhu94,Other
2019-05-06T00:00:00.000Z,0,"@madhu94 i can reproduce with the latest version, so it looks like it hasn't been solved yet, so i suggest making a pr.",0,0,0,pganssle,Other
2019-05-07T00:00:00.000Z,0.828,"hi! is there any progress here? i hate to be indirectly responsible (i did the pr to reactivate jedi) for people having problems with the completion, so i’m very interested in getting this fixed :smile:   > one idea would be to disable jedi autocompletion when typing in a string. i guess that could be a good start for making people happy.definitely, and as you said, there’s some code that needs to be fixed to have that and make people happy.",0,0.397,0,flying-sheep,Other
2019-05-08T00:00:00.000Z,0,"@carreau  , @angertdevsingh  i am planning on working on this. this will be my very first-issue i will be contributing to.to understand better , %%time should display the output for the last line in the cell, instead of suppressing it, like it currently does?  @carreau  , @angertdevsingh  i am planning on working on this. this will be my very first-issue i will be contributing to.to understand better , %%time should display the output for the last line in the cell, instead of suppressing it, like it currently does?",0,0,0,Pragnya02,Other
2019-05-09T00:00:00.000Z,0,this problem has existed for six years and still no solution.,0,0,0,rudaoshi,Other
2019-05-10T00:00:00.000Z,0,"@carreau , i have tweaked the code a bit and opened a pr , if you could please review. https://github.com/ipython/ipython/pull/11716  @carreau , i have tweaked the code a bit and opened a pr , if you could please review. https://github.com/ipython/ipython/pull/11716",0,0,0,Pragnya02,Other
2019-05-11T00:00:00.000Z,0,"https://bugs.python.org/issue36886it's apparently pep 570 effect  there may be code to change because of pep 570, which added a parameter to the function that is used in types module https://github.com/python/cpython/pull/12701/files#diff-cb0b9d6312c0d67f6d4aa1966766ceddl27  you have to do a change like https://github.com/cloudpipe/cloudpickle/pull/267/files#diff-d2a3618afedd4e124c532151eedbae09  https://bugs.python.org/issue36886it's apparently pep 570 effect  there may be code to change because of pep 570, which added a parameter to the function that is used in types module https://github.com/python/cpython/pull/12701/files#diff-cb0b9d6312c0d67f6d4aa1966766ceddl27  you have to do a change like https://github.com/cloudpipe/cloudpickle/pull/267/files#diff-d2a3618afedd4e124c532151eedbae09",0,0,0,stonebig,Other
2019-05-12T00:00:00.000Z,0.47,"i have exactly the same issue. it is annoying since the osx backend is the only one producing retina quality plots. with , e.g., tkagg it all works but plots look blurry.i really hope someone who knows what to do picks this up!",0,0.586,0,faultdiagnosistoolbox,Other
2019-05-13T00:00:00.000Z,0,also looking for a fix or workaround for auto reloading decorated methods!,0,0,0,petebachant,Other
2019-05-14T00:00:00.000Z,0,"yes, this got broken recently. @petobens you should suggest your fix or start a discussion in https://github.com/prompt-toolkit/python-prompt-toolkit/issues instead, because this is not really an issue in ipython but upstream. notice that, meanwhile, you can just monkey-patch the function if you feel like that (i don't, thus the following is untested):```pythondef my_style_from_pygments_dict(pygments_dict):    pygments_style = []    for token, style in pygments_dict.items():        if isinstance(token, str):            pygments_style.append((token, style))        else:            pygments_style.append((pygments_token_to_classname(token), style))    return style(pygments_style)pygments.style_from_pygments_dict = my_style_from_pygments_dict```",0,0,0,memeplex,Other
2019-05-15T00:00:00.000Z,0,this is still a nice to have if it's not already available?,0,0,0,psychemedia,Other
2019-05-16T00:00:00.000Z,0,deadly need this :),0,0,0,schoreZ,Other
2019-05-17T00:00:00.000Z,0,pull request?  * opt-in in v7.* before dumping the history of several executions.* yes but it shouldn't.  pull request?  * opt-in in v7.* before dumping the history of several executions.* yes but it shouldn't.,0,0,0,drunkwcodes,Other
2019-05-18T00:00:00.000Z,0,"this is a really vague bug report. we almost never use `imp` (it is deprecated) , though we do use  `importlib` and `__import__` in many places.  it will be hard to respond without narrowing what you wish / what your actual bug is.   this is a really vague bug report. we almost never use `imp` (it is deprecated) , though we do use  `importlib` and `__import__` in many places.  it will be hard to respond without narrowing what you wish / what your actual bug is.",0,0,0,Carreau,Member
2019-05-19T00:00:00.000Z,0,"thanks, other than the point about testing, this looks ok to me.  thanks, other than the point about testing, this looks ok to me.",0,0,0,takluyver,Member